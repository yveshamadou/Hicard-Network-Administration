/* tslint:disable */
/* eslint-disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.7.0.0 (NJsonSchema v10.1.24.0 (Newtonsoft.Json v11.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming
export class Client2 {
    constructor(baseUrl, http) {
        this.jsonParseReviver = undefined;
        this.http = http ? http : window;
        this.baseUrl = baseUrl ? baseUrl : "";
    }
    /**
     * Gets the application claims
     * @return Success
     */
    claims(id) {
        let url_ = this.baseUrl + "/api/applications/{id}/claims";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };
        return this.http.fetch(url_, options_).then((_response) => {
            return this.processClaims(_response);
        });
    }
    processClaims(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = ResourceModelListApiTaskResult.fromJS(resultData200);
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Gets the application scopes
     * @return Success
     */
    scopes(id) {
        let url_ = this.baseUrl + "/api/applications/{id}/scopes";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };
        return this.http.fetch(url_, options_).then((_response) => {
            return this.processScopes(_response);
        });
    }
    processScopes(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = ScopeModelListApiTaskResult.fromJS(resultData200);
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Adds a claim to an application
     * @param id The application guid
     * @param resourceGuid The resource guid
     * @return Success
     */
    claims2(id, resourceGuid) {
        let url_ = this.baseUrl + "/api/applications/{id}/claims/{resourceGuid}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        if (resourceGuid === undefined || resourceGuid === null)
            throw new Error("The parameter 'resourceGuid' must be defined.");
        url_ = url_.replace("{resourceGuid}", encodeURIComponent("" + resourceGuid));
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "POST",
            headers: {
                "Accept": "text/plain"
            }
        };
        return this.http.fetch(url_, options_).then((_response) => {
            return this.processClaims2(_response);
        });
    }
    processClaims2(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = BooleanApiTaskResult.fromJS(resultData200);
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Deletes an application claim
     * @return Success
     */
    claims3(id, resourceGuid) {
        let url_ = this.baseUrl + "/api/applications/{id}/claims/{resourceGuid}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        if (resourceGuid === undefined || resourceGuid === null)
            throw new Error("The parameter 'resourceGuid' must be defined.");
        url_ = url_.replace("{resourceGuid}", encodeURIComponent("" + resourceGuid));
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "DELETE",
            headers: {
                "Accept": "text/plain"
            }
        };
        return this.http.fetch(url_, options_).then((_response) => {
            return this.processClaims3(_response);
        });
    }
    processClaims3(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = BooleanApiTaskResult.fromJS(resultData200);
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Adds application scope
     * @return Success
     */
    scopes2(id, scopeGuid) {
        let url_ = this.baseUrl + "/api/applications/{id}/scopes/{scopeGuid}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        if (scopeGuid === undefined || scopeGuid === null)
            throw new Error("The parameter 'scopeGuid' must be defined.");
        url_ = url_.replace("{scopeGuid}", encodeURIComponent("" + scopeGuid));
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "POST",
            headers: {
                "Accept": "text/plain"
            }
        };
        return this.http.fetch(url_, options_).then((_response) => {
            return this.processScopes2(_response);
        });
    }
    processScopes2(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = BooleanApiTaskResult.fromJS(resultData200);
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Deletes an application scope
     * @return Success
     */
    scopes3(id, scopeGuid) {
        let url_ = this.baseUrl + "/api/applications/{id}/scopes/{scopeGuid}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        if (scopeGuid === undefined || scopeGuid === null)
            throw new Error("The parameter 'scopeGuid' must be defined.");
        url_ = url_.replace("{scopeGuid}", encodeURIComponent("" + scopeGuid));
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "DELETE",
            headers: {
                "Accept": "text/plain"
            }
        };
        return this.http.fetch(url_, options_).then((_response) => {
            return this.processScopes3(_response);
        });
    }
    processScopes3(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = BooleanApiTaskResult.fromJS(resultData200);
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Gets the list of applications
     * @return Success
     */
    applications() {
        let url_ = this.baseUrl + "/api/applications";
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };
        return this.http.fetch(url_, options_).then((_response) => {
            return this.processApplications(_response);
        });
    }
    processApplications(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = ApplicationModelListApiTaskResult.fromJS(resultData200);
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Update application
     * @param body (optional)
     * @return Success
     */
    applications2(body) {
        let url_ = this.baseUrl + "/api/applications";
        url_ = url_.replace(/[?&]$/, "");
        const content_ = JSON.stringify(body);
        let options_ = {
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            }
        };
        return this.http.fetch(url_, options_).then((_response) => {
            return this.processApplications2(_response);
        });
    }
    processApplications2(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = ApplicationModelApiTaskResult.fromJS(resultData200);
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Creates an application
     * @param body (optional)
     * @return Success
     */
    applications3(body) {
        let url_ = this.baseUrl + "/api/applications";
        url_ = url_.replace(/[?&]$/, "");
        const content_ = JSON.stringify(body);
        let options_ = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            }
        };
        return this.http.fetch(url_, options_).then((_response) => {
            return this.processApplications3(_response);
        });
    }
    processApplications3(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = ApplicationModelApiTaskResult.fromJS(resultData200);
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Gets a single application
     * @return Success
     */
    applications4(id) {
        let url_ = this.baseUrl + "/api/applications/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };
        return this.http.fetch(url_, options_).then((_response) => {
            return this.processApplications4(_response);
        });
    }
    processApplications4(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = ApplicationModelApiTaskResult.fromJS(resultData200);
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Deletes an application
     * @return Success
     */
    applications5(id) {
        let url_ = this.baseUrl + "/api/applications/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "DELETE",
            headers: {
                "Accept": "text/plain"
            }
        };
        return this.http.fetch(url_, options_).then((_response) => {
            return this.processApplications5(_response);
        });
    }
    processApplications5(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = BooleanApiTaskResult.fromJS(resultData200);
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Gets the list of configured application return urls
     * @return Success
     */
    returnUrls(id) {
        let url_ = this.baseUrl + "/api/applications/{id}/returnUrls";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };
        return this.http.fetch(url_, options_).then((_response) => {
            return this.processReturnUrls(_response);
        });
    }
    processReturnUrls(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = ReturnUrlModelListApiTaskResult.fromJS(resultData200);
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Updates the application return Url
     * @param id The application Guid
     * @param body (optional) The return Url model
     * @return Success
     */
    returnUrls2(id, body) {
        let url_ = this.baseUrl + "/api/applications/{id}/returnUrls";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");
        const content_ = JSON.stringify(body);
        let options_ = {
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            }
        };
        return this.http.fetch(url_, options_).then((_response) => {
            return this.processReturnUrls2(_response);
        });
    }
    processReturnUrls2(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = GuidApiTaskResult.fromJS(resultData200);
                return result200;
            });
        }
        else if (status === 404) {
            return response.text().then((_responseText) => {
                let result404 = null;
                let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result404 = GuidApiTaskResult.fromJS(resultData404);
                return throwException("Not Found", status, _responseText, _headers, result404);
            });
        }
        else if (status === 500) {
            return response.text().then((_responseText) => {
                let result500 = null;
                let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result500 = GuidApiTaskResult.fromJS(resultData500);
                return throwException("Server Error", status, _responseText, _headers, result500);
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Creates a new application return url
     * @param id The application Guid
     * @param body (optional) The new return Url
     * @return Success
     */
    returnUrls3(id, body) {
        let url_ = this.baseUrl + "/api/applications/{id}/returnUrls";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");
        const content_ = JSON.stringify(body);
        let options_ = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            }
        };
        return this.http.fetch(url_, options_).then((_response) => {
            return this.processReturnUrls3(_response);
        });
    }
    processReturnUrls3(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = ReturnUrlModelApiTaskResult.fromJS(resultData200);
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Deletes an application return url
     * @return Success
     */
    returnUrls4(id, urlId) {
        let url_ = this.baseUrl + "/api/applications/{id}/returnUrls/{urlId}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        if (urlId === undefined || urlId === null)
            throw new Error("The parameter 'urlId' must be defined.");
        url_ = url_.replace("{urlId}", encodeURIComponent("" + urlId));
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "DELETE",
            headers: {
                "Accept": "text/plain"
            }
        };
        return this.http.fetch(url_, options_).then((_response) => {
            return this.processReturnUrls4(_response);
        });
    }
    processReturnUrls4(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = ReturnUrlModelApiTaskResult.fromJS(resultData200);
                return result200;
            });
        }
        else if (status === 404) {
            return response.text().then((_responseText) => {
                let result404 = null;
                let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result404 = ReturnUrlModelApiTaskResult.fromJS(resultData404);
                return throwException("Not Found", status, _responseText, _headers, result404);
            });
        }
        else if (status === 500) {
            return response.text().then((_responseText) => {
                let result500 = null;
                let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result500 = ReturnUrlModelApiTaskResult.fromJS(resultData500);
                return throwException("Server Error", status, _responseText, _headers, result500);
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Gets the list of application types
     * @return Success
     */
    types() {
        let url_ = this.baseUrl + "/api/applications/types";
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };
        return this.http.fetch(url_, options_).then((_response) => {
            return this.processTypes(_response);
        });
    }
    processTypes(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = ApplicationTypeModelListApiTaskResult.fromJS(resultData200);
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Gets the list of attributes
     * @return Success
     */
    attributes() {
        let url_ = this.baseUrl + "/api/attributes";
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };
        return this.http.fetch(url_, options_).then((_response) => {
            return this.processAttributes(_response);
        });
    }
    processAttributes(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = AttributeModelListApiTaskResult.fromJS(resultData200);
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Updates an attribute
     * @param body (optional) The attribute content
     * @return Success
     */
    attributes2(body) {
        let url_ = this.baseUrl + "/api/attributes";
        url_ = url_.replace(/[?&]$/, "");
        const content_ = JSON.stringify(body);
        let options_ = {
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            }
        };
        return this.http.fetch(url_, options_).then((_response) => {
            return this.processAttributes2(_response);
        });
    }
    processAttributes2(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = AttributeModelApiTaskResult.fromJS(resultData200);
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Creates a new attribute
     * @param body (optional)
     * @return Success
     */
    attributes3(body) {
        let url_ = this.baseUrl + "/api/attributes";
        url_ = url_.replace(/[?&]$/, "");
        const content_ = JSON.stringify(body);
        let options_ = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            }
        };
        return this.http.fetch(url_, options_).then((_response) => {
            return this.processAttributes3(_response);
        });
    }
    processAttributes3(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = AttributeModelApiTaskResult.fromJS(resultData200);
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Deletes an attribute
     * @return Success
     */
    attributes4(id) {
        let url_ = this.baseUrl + "/api/attributes/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "DELETE",
            headers: {
                "Accept": "text/plain"
            }
        };
        return this.http.fetch(url_, options_).then((_response) => {
            return this.processAttributes4(_response);
        });
    }
    processAttributes4(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = BooleanApiTaskResult.fromJS(resultData200);
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Authorize
     * @return Success
     */
    authorize() {
        let url_ = this.baseUrl + "/connect/authorize";
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "GET",
            headers: {}
        };
        return this.http.fetch(url_, options_).then((_response) => {
            return this.processAuthorize(_response);
        });
    }
    processAuthorize(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                return;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Authorize
     * @return Success
     */
    authorize2() {
        let url_ = this.baseUrl + "/connect/authorize";
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "POST",
            headers: {}
        };
        return this.http.fetch(url_, options_).then((_response) => {
            return this.processAuthorize2(_response);
        });
    }
    processAuthorize2(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                return;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Process registration
     * @return Success
     */
    registration() {
        let url_ = this.baseUrl + "/connect/registration";
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "GET",
            headers: {}
        };
        return this.http.fetch(url_, options_).then((_response) => {
            return this.processRegistration(_response);
        });
    }
    processRegistration(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                return;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Process registration
     * @return Success
     */
    registration2() {
        let url_ = this.baseUrl + "/connect/registration";
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "POST",
            headers: {}
        };
        return this.http.fetch(url_, options_).then((_response) => {
            return this.processRegistration2(_response);
        });
    }
    processRegistration2(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                return;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Generate token
     * @param client_id (optional) Gets or sets the client_id
     * @param client_secret (optional) Gets or sets the client_secret
     * @param code (optional) Gets or sets the code
     * @param redirect_uri (optional) Gets or sets the redirect_uri
     * @param grant_type (optional) Gets or sets the grant_type
     * @param state (optional) Gets or sets the state
     * @param userName (optional) Gets or sets the user name
     * @param password (optional) Gets or sets the password
     * @param errors (optional) Gets or sets errors
     * @return Success
     */
    token(client_id, client_secret, code, redirect_uri, grant_type, state, userName, password, errors) {
        let url_ = this.baseUrl + "/connect/token?";
        if (client_id === null)
            throw new Error("The parameter 'client_id' cannot be null.");
        else if (client_id !== undefined)
            url_ += "client_id=" + encodeURIComponent("" + client_id) + "&";
        if (client_secret === null)
            throw new Error("The parameter 'client_secret' cannot be null.");
        else if (client_secret !== undefined)
            url_ += "client_secret=" + encodeURIComponent("" + client_secret) + "&";
        if (code === null)
            throw new Error("The parameter 'code' cannot be null.");
        else if (code !== undefined)
            url_ += "code=" + encodeURIComponent("" + code) + "&";
        if (redirect_uri === null)
            throw new Error("The parameter 'redirect_uri' cannot be null.");
        else if (redirect_uri !== undefined)
            url_ += "redirect_uri=" + encodeURIComponent("" + redirect_uri) + "&";
        if (grant_type === null)
            throw new Error("The parameter 'grant_type' cannot be null.");
        else if (grant_type !== undefined)
            url_ += "grant_type=" + encodeURIComponent("" + grant_type) + "&";
        if (state === null)
            throw new Error("The parameter 'state' cannot be null.");
        else if (state !== undefined)
            url_ += "state=" + encodeURIComponent("" + state) + "&";
        if (userName === null)
            throw new Error("The parameter 'userName' cannot be null.");
        else if (userName !== undefined)
            url_ += "userName=" + encodeURIComponent("" + userName) + "&";
        if (password === null)
            throw new Error("The parameter 'password' cannot be null.");
        else if (password !== undefined)
            url_ += "password=" + encodeURIComponent("" + password) + "&";
        if (errors === null)
            throw new Error("The parameter 'errors' cannot be null.");
        else if (errors !== undefined)
            errors && errors.forEach(item => { url_ += "Errors=" + encodeURIComponent("" + item) + "&"; });
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "POST",
            headers: {}
        };
        return this.http.fetch(url_, options_).then((_response) => {
            return this.processToken(_response);
        });
    }
    processToken(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                return;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * @param client_id (optional) Gets or sets the client_id
     * @param client_secret (optional) Gets or sets the client_secret
     * @param code (optional) Gets or sets the code
     * @param redirect_uri (optional) Gets or sets the redirect_uri
     * @param grant_type (optional) Gets or sets the grant_type
     * @param state (optional) Gets or sets the state
     * @param userName (optional) Gets or sets the user name
     * @param password (optional) Gets or sets the password
     * @param errors (optional) Gets or sets errors
     * @return Success
     */
    activatorAccessToken(client_id, client_secret, code, redirect_uri, grant_type, state, userName, password, errors) {
        let url_ = this.baseUrl + "/connect/activatorAccessToken?";
        if (client_id === null)
            throw new Error("The parameter 'client_id' cannot be null.");
        else if (client_id !== undefined)
            url_ += "client_id=" + encodeURIComponent("" + client_id) + "&";
        if (client_secret === null)
            throw new Error("The parameter 'client_secret' cannot be null.");
        else if (client_secret !== undefined)
            url_ += "client_secret=" + encodeURIComponent("" + client_secret) + "&";
        if (code === null)
            throw new Error("The parameter 'code' cannot be null.");
        else if (code !== undefined)
            url_ += "code=" + encodeURIComponent("" + code) + "&";
        if (redirect_uri === null)
            throw new Error("The parameter 'redirect_uri' cannot be null.");
        else if (redirect_uri !== undefined)
            url_ += "redirect_uri=" + encodeURIComponent("" + redirect_uri) + "&";
        if (grant_type === null)
            throw new Error("The parameter 'grant_type' cannot be null.");
        else if (grant_type !== undefined)
            url_ += "grant_type=" + encodeURIComponent("" + grant_type) + "&";
        if (state === null)
            throw new Error("The parameter 'state' cannot be null.");
        else if (state !== undefined)
            url_ += "state=" + encodeURIComponent("" + state) + "&";
        if (userName === null)
            throw new Error("The parameter 'userName' cannot be null.");
        else if (userName !== undefined)
            url_ += "userName=" + encodeURIComponent("" + userName) + "&";
        if (password === null)
            throw new Error("The parameter 'password' cannot be null.");
        else if (password !== undefined)
            url_ += "password=" + encodeURIComponent("" + password) + "&";
        if (errors === null)
            throw new Error("The parameter 'errors' cannot be null.");
        else if (errors !== undefined)
            errors && errors.forEach(item => { url_ += "Errors=" + encodeURIComponent("" + item) + "&"; });
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "POST",
            headers: {}
        };
        return this.http.fetch(url_, options_).then((_response) => {
            return this.processActivatorAccessToken(_response);
        });
    }
    processActivatorAccessToken(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                return;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * @param body (optional)
     * @return Success
     */
    activatorV1AccessToken(body) {
        let url_ = this.baseUrl + "/connect/activatorV1AccessToken";
        url_ = url_.replace(/[?&]$/, "");
        const content_ = JSON.stringify(body);
        let options_ = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            }
        };
        return this.http.fetch(url_, options_).then((_response) => {
            return this.processActivatorV1AccessToken(_response);
        });
    }
    processActivatorV1AccessToken(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = ActivatorTokenModelResultApiTaskResult.fromJS(resultData200);
                return result200;
            });
        }
        else if (status === 401) {
            return response.text().then((_responseText) => {
                let result401 = null;
                let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result401 = ActivatorTokenModelResultApiTaskResult.fromJS(resultData401);
                return throwException("Unauthorized", status, _responseText, _headers, result401);
            });
        }
        else if (status === 500) {
            return response.text().then((_responseText) => {
                let result500 = null;
                let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result500 = ActivatorTokenModelResultApiTaskResult.fromJS(resultData500);
                return throwException("Server Error", status, _responseText, _headers, result500);
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Default login
     * @return Success
     */
    login() {
        let url_ = this.baseUrl + "/connect/login";
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "GET",
            headers: {}
        };
        return this.http.fetch(url_, options_).then((_response) => {
            return this.processLogin(_response);
        });
    }
    processLogin(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                return;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Default login
     * @return Success
     */
    login2() {
        let url_ = this.baseUrl + "/connect/login";
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "POST",
            headers: {}
        };
        return this.http.fetch(url_, options_).then((_response) => {
            return this.processLogin2(_response);
        });
    }
    processLogin2(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                return;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Default register
     * @return Success
     */
    register() {
        let url_ = this.baseUrl + "/connect/register";
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "GET",
            headers: {}
        };
        return this.http.fetch(url_, options_).then((_response) => {
            return this.processRegister(_response);
        });
    }
    processRegister(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                return;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Default register
     * @return Success
     */
    register2() {
        let url_ = this.baseUrl + "/connect/register";
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "POST",
            headers: {}
        };
        return this.http.fetch(url_, options_).then((_response) => {
            return this.processRegister2(_response);
        });
    }
    processRegister2(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                return;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Gets the list of data types
     * @return Success
     */
    datatypes() {
        let url_ = this.baseUrl + "/api/datatypes";
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };
        return this.http.fetch(url_, options_).then((_response) => {
            return this.processDatatypes(_response);
        });
    }
    processDatatypes(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = DataTypeModelListApiTaskResult.fromJS(resultData200);
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Gets the list of resources
     * @return Success
     */
    resources() {
        let url_ = this.baseUrl + "/api/resources";
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };
        return this.http.fetch(url_, options_).then((_response) => {
            return this.processResources(_response);
        });
    }
    processResources(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = ResourceModelListApiTaskResult.fromJS(resultData200);
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Updates an resource
     * @param body (optional) The resource content
     * @return Success
     */
    resources2(body) {
        let url_ = this.baseUrl + "/api/resources";
        url_ = url_.replace(/[?&]$/, "");
        const content_ = JSON.stringify(body);
        let options_ = {
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            }
        };
        return this.http.fetch(url_, options_).then((_response) => {
            return this.processResources2(_response);
        });
    }
    processResources2(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = ResourceModelApiTaskResult.fromJS(resultData200);
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Creates a new resource
     * @param body (optional)
     * @return Success
     */
    resources3(body) {
        let url_ = this.baseUrl + "/api/resources";
        url_ = url_.replace(/[?&]$/, "");
        const content_ = JSON.stringify(body);
        let options_ = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            }
        };
        return this.http.fetch(url_, options_).then((_response) => {
            return this.processResources3(_response);
        });
    }
    processResources3(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = ResourceModelApiTaskResult.fromJS(resultData200);
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Deletes a resource
     * @return Success
     */
    resources4(id) {
        let url_ = this.baseUrl + "/api/resources/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "DELETE",
            headers: {
                "Accept": "text/plain"
            }
        };
        return this.http.fetch(url_, options_).then((_response) => {
            return this.processResources4(_response);
        });
    }
    processResources4(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = BooleanApiTaskResult.fromJS(resultData200);
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Gets attributes for the resource
     * @return Success
     */
    attributes5(id) {
        let url_ = this.baseUrl + "/api/resources/{id}/attributes";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };
        return this.http.fetch(url_, options_).then((_response) => {
            return this.processAttributes5(_response);
        });
    }
    processAttributes5(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = AttributeModelListApiTaskResult.fromJS(resultData200);
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Deletes a resource attribute
     * @return Success
     */
    attributes6(id, attributeGuid) {
        let url_ = this.baseUrl + "/api/resources/{id}/attributes/{attributeGuid}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        if (attributeGuid === undefined || attributeGuid === null)
            throw new Error("The parameter 'attributeGuid' must be defined.");
        url_ = url_.replace("{attributeGuid}", encodeURIComponent("" + attributeGuid));
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "DELETE",
            headers: {
                "Accept": "text/plain"
            }
        };
        return this.http.fetch(url_, options_).then((_response) => {
            return this.processAttributes6(_response);
        });
    }
    processAttributes6(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = BooleanApiTaskResult.fromJS(resultData200);
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Adds resource attribute
     * @return Success
     */
    attributes7(id, attributeGuid) {
        let url_ = this.baseUrl + "/api/resources/{id}/attributes/{attributeGuid}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        if (attributeGuid === undefined || attributeGuid === null)
            throw new Error("The parameter 'attributeGuid' must be defined.");
        url_ = url_.replace("{attributeGuid}", encodeURIComponent("" + attributeGuid));
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "POST",
            headers: {
                "Accept": "text/plain"
            }
        };
        return this.http.fetch(url_, options_).then((_response) => {
            return this.processAttributes7(_response);
        });
    }
    processAttributes7(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = BooleanApiTaskResult.fromJS(resultData200);
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Gets list of resource types
     * @return Success
     */
    resourceTypes() {
        let url_ = this.baseUrl + "/api/resourceTypes";
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };
        return this.http.fetch(url_, options_).then((_response) => {
            return this.processResourceTypes(_response);
        });
    }
    processResourceTypes(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = ResourceTypeModelListApiTaskResult.fromJS(resultData200);
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Gets all scopes
     * @return Success
     */
    scopes4() {
        let url_ = this.baseUrl + "/api/scopes";
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };
        return this.http.fetch(url_, options_).then((_response) => {
            return this.processScopes4(_response);
        });
    }
    processScopes4(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = ScopeModelListApiTaskResult.fromJS(resultData200);
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Updates a scope
     * @param body (optional)
     * @return Success
     */
    scopes5(body) {
        let url_ = this.baseUrl + "/api/scopes";
        url_ = url_.replace(/[?&]$/, "");
        const content_ = JSON.stringify(body);
        let options_ = {
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            }
        };
        return this.http.fetch(url_, options_).then((_response) => {
            return this.processScopes5(_response);
        });
    }
    processScopes5(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = ScopeModelApiTaskResult.fromJS(resultData200);
                return result200;
            });
        }
        else if (status === 404) {
            return response.text().then((_responseText) => {
                let result404 = null;
                let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result404 = ScopeModelApiTaskResult.fromJS(resultData404);
                return throwException("Not Found", status, _responseText, _headers, result404);
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Creates a new scope
     * @param body (optional)
     * @return Success
     */
    scopes6(body) {
        let url_ = this.baseUrl + "/api/scopes";
        url_ = url_.replace(/[?&]$/, "");
        const content_ = JSON.stringify(body);
        let options_ = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            }
        };
        return this.http.fetch(url_, options_).then((_response) => {
            return this.processScopes6(_response);
        });
    }
    processScopes6(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = ScopeModelApiTaskResult.fromJS(resultData200);
                return result200;
            });
        }
        else if (status === 404) {
            return response.text().then((_responseText) => {
                let result404 = null;
                let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result404 = ScopeModelApiTaskResult.fromJS(resultData404);
                return throwException("Not Found", status, _responseText, _headers, result404);
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Deletes a scope
     * @return Success
     */
    scopes7(id) {
        let url_ = this.baseUrl + "/api/scopes/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "DELETE",
            headers: {
                "Accept": "text/plain"
            }
        };
        return this.http.fetch(url_, options_).then((_response) => {
            return this.processScopes7(_response);
        });
    }
    processScopes7(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = BooleanApiTaskResult.fromJS(resultData200);
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Authenticates the user
     * @param body (optional) User credentials
     * @return Success
     */
    authenticate(body) {
        let url_ = this.baseUrl + "/api/security/authenticate";
        url_ = url_.replace(/[?&]$/, "");
        const content_ = JSON.stringify(body);
        let options_ = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            }
        };
        return this.http.fetch(url_, options_).then((_response) => {
            return this.processAuthenticate(_response);
        });
    }
    processAuthenticate(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = AuthenticationResultModelApiTaskResult.fromJS(resultData200);
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Autorizes the request
     * @param body (optional)
     * @return Success
     */
    authorize3(body) {
        let url_ = this.baseUrl + "/api/security/authorize";
        url_ = url_.replace(/[?&]$/, "");
        const content_ = JSON.stringify(body);
        let options_ = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            }
        };
        return this.http.fetch(url_, options_).then((_response) => {
            return this.processAuthorize3(_response);
        });
    }
    processAuthorize3(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = AuthenticationResultModelApiTaskResult.fromJS(resultData200);
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Creates a new user
     * @param body (optional)
     * @return Success
     */
    createUser(body) {
        let url_ = this.baseUrl + "/api/security/createUser";
        url_ = url_.replace(/[?&]$/, "");
        const content_ = JSON.stringify(body);
        let options_ = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            }
        };
        return this.http.fetch(url_, options_).then((_response) => {
            return this.processCreateUser(_response);
        });
    }
    processCreateUser(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = AuthenticationResultModelApiTaskResult.fromJS(resultData200);
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * @param body (optional)
     * @return Success
     */
    newApplicationUser(body) {
        let url_ = this.baseUrl + "/api/security/newApplicationUser";
        url_ = url_.replace(/[?&]$/, "");
        const content_ = JSON.stringify(body);
        let options_ = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            }
        };
        return this.http.fetch(url_, options_).then((_response) => {
            return this.processNewApplicationUser(_response);
        });
    }
    processNewApplicationUser(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = GuidApiTaskResult.fromJS(resultData200);
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Updates user attributes
     * @param body (optional)
     * @return Success
     */
    updateUserAttributes(body) {
        let url_ = this.baseUrl + "/api/security/updateUserAttributes";
        url_ = url_.replace(/[?&]$/, "");
        const content_ = JSON.stringify(body);
        let options_ = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            }
        };
        return this.http.fetch(url_, options_).then((_response) => {
            return this.processUpdateUserAttributes(_response);
        });
    }
    processUpdateUserAttributes(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = BooleanApiTaskResult.fromJS(resultData200);
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Encodes Activator token
     * @param body (optional)
     * @return Success
     */
    encodeActivatorV1AccessToken(body) {
        let url_ = this.baseUrl + "/api/security/encodeActivatorV1AccessToken";
        url_ = url_.replace(/[?&]$/, "");
        const content_ = JSON.stringify(body);
        let options_ = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            }
        };
        return this.http.fetch(url_, options_).then((_response) => {
            return this.processEncodeActivatorV1AccessToken(_response);
        });
    }
    processEncodeActivatorV1AccessToken(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = ActivatorTokenModelResultApiTaskResult.fromJS(resultData200);
                return result200;
            });
        }
        else if (status === 401) {
            return response.text().then((_responseText) => {
                let result401 = null;
                let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result401 = ActivatorTokenModelResultApiTaskResult.fromJS(resultData401);
                return throwException("Unauthorized", status, _responseText, _headers, result401);
            });
        }
        else if (status === 500) {
            return response.text().then((_responseText) => {
                let result500 = null;
                let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result500 = ActivatorTokenModelResultApiTaskResult.fromJS(resultData500);
                return throwException("Server Error", status, _responseText, _headers, result500);
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Gets the list of users
     * @return Success
     */
    users() {
        let url_ = this.baseUrl + "/api/users";
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };
        return this.http.fetch(url_, options_).then((_response) => {
            return this.processUsers(_response);
        });
    }
    processUsers(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = UserProfileModelListApiTaskResult.fromJS(resultData200);
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Gets the list of attributes for the user
     * @param id The user guid
     * @return Success
     */
    attributes8(id) {
        let url_ = this.baseUrl + "/api/users/{id}/attributes";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };
        return this.http.fetch(url_, options_).then((_response) => {
            return this.processAttributes8(_response);
        });
    }
    processAttributes8(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = UserAttributeModelListApiTaskResult.fromJS(resultData200);
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
}
export class ResourceModel {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            this.resourceGuid = _data["resourceGuid"];
            this.resourceTypeID = _data["resourceTypeID"];
            this.name = _data["name"];
            this.description = _data["description"];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new ResourceModel();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["resourceGuid"] = this.resourceGuid;
        data["resourceTypeID"] = this.resourceTypeID;
        data["name"] = this.name;
        data["description"] = this.description;
        return data;
    }
}
/** Represents an error */
export class ApiTaskResultError {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            this.errorCode = _data["errorCode"];
            this.description = _data["description"];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new ApiTaskResultError();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["errorCode"] = this.errorCode;
        data["description"] = this.description;
        return data;
    }
}
export class ResourceModelListApiTaskResult {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            this.taskGuid = _data["taskGuid"];
            if (Array.isArray(_data["payload"])) {
                this.payload = [];
                for (let item of _data["payload"])
                    this.payload.push(ResourceModel.fromJS(item));
            }
            if (Array.isArray(_data["errors"])) {
                this.errors = [];
                for (let item of _data["errors"])
                    this.errors.push(ApiTaskResultError.fromJS(item));
            }
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new ResourceModelListApiTaskResult();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["taskGuid"] = this.taskGuid;
        if (Array.isArray(this.payload)) {
            data["payload"] = [];
            for (let item of this.payload)
                data["payload"].push(item.toJSON());
        }
        if (Array.isArray(this.errors)) {
            data["errors"] = [];
            for (let item of this.errors)
                data["errors"].push(item.toJSON());
        }
        return data;
    }
}
export class ScopeModel {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            this.scopeGuid = _data["scopeGuid"];
            this.name = _data["name"];
            this.description = _data["description"];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new ScopeModel();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["scopeGuid"] = this.scopeGuid;
        data["name"] = this.name;
        data["description"] = this.description;
        return data;
    }
}
export class ScopeModelListApiTaskResult {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            this.taskGuid = _data["taskGuid"];
            if (Array.isArray(_data["payload"])) {
                this.payload = [];
                for (let item of _data["payload"])
                    this.payload.push(ScopeModel.fromJS(item));
            }
            if (Array.isArray(_data["errors"])) {
                this.errors = [];
                for (let item of _data["errors"])
                    this.errors.push(ApiTaskResultError.fromJS(item));
            }
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new ScopeModelListApiTaskResult();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["taskGuid"] = this.taskGuid;
        if (Array.isArray(this.payload)) {
            data["payload"] = [];
            for (let item of this.payload)
                data["payload"].push(item.toJSON());
        }
        if (Array.isArray(this.errors)) {
            data["errors"] = [];
            for (let item of this.errors)
                data["errors"].push(item.toJSON());
        }
        return data;
    }
}
export class BooleanApiTaskResult {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            this.taskGuid = _data["taskGuid"];
            this.payload = _data["payload"];
            if (Array.isArray(_data["errors"])) {
                this.errors = [];
                for (let item of _data["errors"])
                    this.errors.push(ApiTaskResultError.fromJS(item));
            }
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new BooleanApiTaskResult();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["taskGuid"] = this.taskGuid;
        data["payload"] = this.payload;
        if (Array.isArray(this.errors)) {
            data["errors"] = [];
            for (let item of this.errors)
                data["errors"].push(item.toJSON());
        }
        return data;
    }
}
export class ApplicationModel {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            this.applicationGuid = _data["applicationGuid"];
            this.applicationTypeID = _data["applicationTypeID"];
            this.isActive = _data["isActive"];
            this.name = _data["name"];
            this.applicationSecret = _data["applicationSecret"];
            this.loginPageTemplateUrl = _data["loginPageTemplateUrl"];
            this.registrationPageTemplateUrl = _data["registrationPageTemplateUrl"];
            this.changePasswordPageTemplateUrl = _data["changePasswordPageTemplateUrl"];
            this.description = _data["description"];
            this.mfaTemplate = _data["mfaTemplate"];
            this.enableNewUserNotification = _data["enableNewUserNotification"];
            this.newUserEmailNotificationTemplate = _data["newUserEmailNotificationTemplate"];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new ApplicationModel();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["applicationGuid"] = this.applicationGuid;
        data["applicationTypeID"] = this.applicationTypeID;
        data["isActive"] = this.isActive;
        data["name"] = this.name;
        data["applicationSecret"] = this.applicationSecret;
        data["loginPageTemplateUrl"] = this.loginPageTemplateUrl;
        data["registrationPageTemplateUrl"] = this.registrationPageTemplateUrl;
        data["changePasswordPageTemplateUrl"] = this.changePasswordPageTemplateUrl;
        data["description"] = this.description;
        data["mfaTemplate"] = this.mfaTemplate;
        data["enableNewUserNotification"] = this.enableNewUserNotification;
        data["newUserEmailNotificationTemplate"] = this.newUserEmailNotificationTemplate;
        return data;
    }
}
export class ApplicationModelListApiTaskResult {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            this.taskGuid = _data["taskGuid"];
            if (Array.isArray(_data["payload"])) {
                this.payload = [];
                for (let item of _data["payload"])
                    this.payload.push(ApplicationModel.fromJS(item));
            }
            if (Array.isArray(_data["errors"])) {
                this.errors = [];
                for (let item of _data["errors"])
                    this.errors.push(ApiTaskResultError.fromJS(item));
            }
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new ApplicationModelListApiTaskResult();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["taskGuid"] = this.taskGuid;
        if (Array.isArray(this.payload)) {
            data["payload"] = [];
            for (let item of this.payload)
                data["payload"].push(item.toJSON());
        }
        if (Array.isArray(this.errors)) {
            data["errors"] = [];
            for (let item of this.errors)
                data["errors"].push(item.toJSON());
        }
        return data;
    }
}
export class ApplicationModelApiTaskResult {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            this.taskGuid = _data["taskGuid"];
            this.payload = _data["payload"] ? ApplicationModel.fromJS(_data["payload"]) : undefined;
            if (Array.isArray(_data["errors"])) {
                this.errors = [];
                for (let item of _data["errors"])
                    this.errors.push(ApiTaskResultError.fromJS(item));
            }
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new ApplicationModelApiTaskResult();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["taskGuid"] = this.taskGuid;
        data["payload"] = this.payload ? this.payload.toJSON() : undefined;
        if (Array.isArray(this.errors)) {
            data["errors"] = [];
            for (let item of this.errors)
                data["errors"].push(item.toJSON());
        }
        return data;
    }
}
export class ReturnUrlModel {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            this.id = _data["id"];
            this.url = _data["url"];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new ReturnUrlModel();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["url"] = this.url;
        return data;
    }
}
export class ReturnUrlModelListApiTaskResult {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            this.taskGuid = _data["taskGuid"];
            if (Array.isArray(_data["payload"])) {
                this.payload = [];
                for (let item of _data["payload"])
                    this.payload.push(ReturnUrlModel.fromJS(item));
            }
            if (Array.isArray(_data["errors"])) {
                this.errors = [];
                for (let item of _data["errors"])
                    this.errors.push(ApiTaskResultError.fromJS(item));
            }
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new ReturnUrlModelListApiTaskResult();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["taskGuid"] = this.taskGuid;
        if (Array.isArray(this.payload)) {
            data["payload"] = [];
            for (let item of this.payload)
                data["payload"].push(item.toJSON());
        }
        if (Array.isArray(this.errors)) {
            data["errors"] = [];
            for (let item of this.errors)
                data["errors"].push(item.toJSON());
        }
        return data;
    }
}
export class GuidApiTaskResult {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            this.taskGuid = _data["taskGuid"];
            this.payload = _data["payload"];
            if (Array.isArray(_data["errors"])) {
                this.errors = [];
                for (let item of _data["errors"])
                    this.errors.push(ApiTaskResultError.fromJS(item));
            }
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new GuidApiTaskResult();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["taskGuid"] = this.taskGuid;
        data["payload"] = this.payload;
        if (Array.isArray(this.errors)) {
            data["errors"] = [];
            for (let item of this.errors)
                data["errors"].push(item.toJSON());
        }
        return data;
    }
}
export class ReturnUrlValueModel {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            this.url = _data["url"];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new ReturnUrlValueModel();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["url"] = this.url;
        return data;
    }
}
export class ReturnUrlModelApiTaskResult {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            this.taskGuid = _data["taskGuid"];
            this.payload = _data["payload"] ? ReturnUrlModel.fromJS(_data["payload"]) : undefined;
            if (Array.isArray(_data["errors"])) {
                this.errors = [];
                for (let item of _data["errors"])
                    this.errors.push(ApiTaskResultError.fromJS(item));
            }
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new ReturnUrlModelApiTaskResult();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["taskGuid"] = this.taskGuid;
        data["payload"] = this.payload ? this.payload.toJSON() : undefined;
        if (Array.isArray(this.errors)) {
            data["errors"] = [];
            for (let item of this.errors)
                data["errors"].push(item.toJSON());
        }
        return data;
    }
}
export class ApplicationTypeModel {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            this.applicationTypeID = _data["applicationTypeID"];
            this.name = _data["name"];
            this.description = _data["description"];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new ApplicationTypeModel();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["applicationTypeID"] = this.applicationTypeID;
        data["name"] = this.name;
        data["description"] = this.description;
        return data;
    }
}
export class ApplicationTypeModelListApiTaskResult {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            this.taskGuid = _data["taskGuid"];
            if (Array.isArray(_data["payload"])) {
                this.payload = [];
                for (let item of _data["payload"])
                    this.payload.push(ApplicationTypeModel.fromJS(item));
            }
            if (Array.isArray(_data["errors"])) {
                this.errors = [];
                for (let item of _data["errors"])
                    this.errors.push(ApiTaskResultError.fromJS(item));
            }
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new ApplicationTypeModelListApiTaskResult();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["taskGuid"] = this.taskGuid;
        if (Array.isArray(this.payload)) {
            data["payload"] = [];
            for (let item of this.payload)
                data["payload"].push(item.toJSON());
        }
        if (Array.isArray(this.errors)) {
            data["errors"] = [];
            for (let item of this.errors)
                data["errors"].push(item.toJSON());
        }
        return data;
    }
}
export class AttributeModel {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            this.attributeGuid = _data["attributeGuid"];
            this.name = _data["name"];
            this.dataTypeID = _data["dataTypeID"];
            this.description = _data["description"];
            this.isCustom = _data["isCustom"];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new AttributeModel();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["attributeGuid"] = this.attributeGuid;
        data["name"] = this.name;
        data["dataTypeID"] = this.dataTypeID;
        data["description"] = this.description;
        data["isCustom"] = this.isCustom;
        return data;
    }
}
export class AttributeModelListApiTaskResult {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            this.taskGuid = _data["taskGuid"];
            if (Array.isArray(_data["payload"])) {
                this.payload = [];
                for (let item of _data["payload"])
                    this.payload.push(AttributeModel.fromJS(item));
            }
            if (Array.isArray(_data["errors"])) {
                this.errors = [];
                for (let item of _data["errors"])
                    this.errors.push(ApiTaskResultError.fromJS(item));
            }
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new AttributeModelListApiTaskResult();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["taskGuid"] = this.taskGuid;
        if (Array.isArray(this.payload)) {
            data["payload"] = [];
            for (let item of this.payload)
                data["payload"].push(item.toJSON());
        }
        if (Array.isArray(this.errors)) {
            data["errors"] = [];
            for (let item of this.errors)
                data["errors"].push(item.toJSON());
        }
        return data;
    }
}
export class AttributeModelApiTaskResult {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            this.taskGuid = _data["taskGuid"];
            this.payload = _data["payload"] ? AttributeModel.fromJS(_data["payload"]) : undefined;
            if (Array.isArray(_data["errors"])) {
                this.errors = [];
                for (let item of _data["errors"])
                    this.errors.push(ApiTaskResultError.fromJS(item));
            }
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new AttributeModelApiTaskResult();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["taskGuid"] = this.taskGuid;
        data["payload"] = this.payload ? this.payload.toJSON() : undefined;
        if (Array.isArray(this.errors)) {
            data["errors"] = [];
            for (let item of this.errors)
                data["errors"].push(item.toJSON());
        }
        return data;
    }
}
/** Activator token model */
export class ActivatorTokenModel {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            this.client_id = _data["client_id"];
            this.client_secret = _data["client_secret"];
            this.id_token = _data["id_token"];
            this.activator_security_token = _data["activator_security_token"];
            this.state = _data["state"];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new ActivatorTokenModel();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["client_id"] = this.client_id;
        data["client_secret"] = this.client_secret;
        data["id_token"] = this.id_token;
        data["activator_security_token"] = this.activator_security_token;
        data["state"] = this.state;
        return data;
    }
}
export class ActivatorTokenModelResult {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            this.access_token = _data["access_token"];
            this.expiration_date_time = _data["expiration_date_time"] ? new Date(_data["expiration_date_time"].toString()) : undefined;
            this.state = _data["state"];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new ActivatorTokenModelResult();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["access_token"] = this.access_token;
        data["expiration_date_time"] = this.expiration_date_time ? this.expiration_date_time.toISOString() : undefined;
        data["state"] = this.state;
        return data;
    }
}
export class ActivatorTokenModelResultApiTaskResult {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            this.taskGuid = _data["taskGuid"];
            this.payload = _data["payload"] ? ActivatorTokenModelResult.fromJS(_data["payload"]) : undefined;
            if (Array.isArray(_data["errors"])) {
                this.errors = [];
                for (let item of _data["errors"])
                    this.errors.push(ApiTaskResultError.fromJS(item));
            }
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new ActivatorTokenModelResultApiTaskResult();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["taskGuid"] = this.taskGuid;
        data["payload"] = this.payload ? this.payload.toJSON() : undefined;
        if (Array.isArray(this.errors)) {
            data["errors"] = [];
            for (let item of this.errors)
                data["errors"].push(item.toJSON());
        }
        return data;
    }
}
export class DataTypeModel {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            this.dataTypeID = _data["dataTypeID"];
            this.name = _data["name"];
            this.description = _data["description"];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new DataTypeModel();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["dataTypeID"] = this.dataTypeID;
        data["name"] = this.name;
        data["description"] = this.description;
        return data;
    }
}
export class DataTypeModelListApiTaskResult {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            this.taskGuid = _data["taskGuid"];
            if (Array.isArray(_data["payload"])) {
                this.payload = [];
                for (let item of _data["payload"])
                    this.payload.push(DataTypeModel.fromJS(item));
            }
            if (Array.isArray(_data["errors"])) {
                this.errors = [];
                for (let item of _data["errors"])
                    this.errors.push(ApiTaskResultError.fromJS(item));
            }
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new DataTypeModelListApiTaskResult();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["taskGuid"] = this.taskGuid;
        if (Array.isArray(this.payload)) {
            data["payload"] = [];
            for (let item of this.payload)
                data["payload"].push(item.toJSON());
        }
        if (Array.isArray(this.errors)) {
            data["errors"] = [];
            for (let item of this.errors)
                data["errors"].push(item.toJSON());
        }
        return data;
    }
}
export class ResourceModelApiTaskResult {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            this.taskGuid = _data["taskGuid"];
            this.payload = _data["payload"] ? ResourceModel.fromJS(_data["payload"]) : undefined;
            if (Array.isArray(_data["errors"])) {
                this.errors = [];
                for (let item of _data["errors"])
                    this.errors.push(ApiTaskResultError.fromJS(item));
            }
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new ResourceModelApiTaskResult();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["taskGuid"] = this.taskGuid;
        data["payload"] = this.payload ? this.payload.toJSON() : undefined;
        if (Array.isArray(this.errors)) {
            data["errors"] = [];
            for (let item of this.errors)
                data["errors"].push(item.toJSON());
        }
        return data;
    }
}
export class ResourceTypeModel {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            this.resourceTypeID = _data["resourceTypeID"];
            this.name = _data["name"];
            this.description = _data["description"];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new ResourceTypeModel();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["resourceTypeID"] = this.resourceTypeID;
        data["name"] = this.name;
        data["description"] = this.description;
        return data;
    }
}
export class ResourceTypeModelListApiTaskResult {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            this.taskGuid = _data["taskGuid"];
            if (Array.isArray(_data["payload"])) {
                this.payload = [];
                for (let item of _data["payload"])
                    this.payload.push(ResourceTypeModel.fromJS(item));
            }
            if (Array.isArray(_data["errors"])) {
                this.errors = [];
                for (let item of _data["errors"])
                    this.errors.push(ApiTaskResultError.fromJS(item));
            }
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new ResourceTypeModelListApiTaskResult();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["taskGuid"] = this.taskGuid;
        if (Array.isArray(this.payload)) {
            data["payload"] = [];
            for (let item of this.payload)
                data["payload"].push(item.toJSON());
        }
        if (Array.isArray(this.errors)) {
            data["errors"] = [];
            for (let item of this.errors)
                data["errors"].push(item.toJSON());
        }
        return data;
    }
}
export class ScopeModelApiTaskResult {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            this.taskGuid = _data["taskGuid"];
            this.payload = _data["payload"] ? ScopeModel.fromJS(_data["payload"]) : undefined;
            if (Array.isArray(_data["errors"])) {
                this.errors = [];
                for (let item of _data["errors"])
                    this.errors.push(ApiTaskResultError.fromJS(item));
            }
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new ScopeModelApiTaskResult();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["taskGuid"] = this.taskGuid;
        data["payload"] = this.payload ? this.payload.toJSON() : undefined;
        if (Array.isArray(this.errors)) {
            data["errors"] = [];
            for (let item of this.errors)
                data["errors"].push(item.toJSON());
        }
        return data;
    }
}
/** User credentials */
export class AuthenticationInputModel {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            this.userName = _data["userName"];
            this.password = _data["password"];
            this.clientID = _data["clientID"];
            this.scope = _data["scope"];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new AuthenticationInputModel();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["userName"] = this.userName;
        data["password"] = this.password;
        data["clientID"] = this.clientID;
        data["scope"] = this.scope;
        return data;
    }
}
/** Authentication result */
export class AuthenticationResultModel {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            this.isAuthenticated = _data["isAuthenticated"];
            this.jwtSecurityToken = _data["jwtSecurityToken"];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new AuthenticationResultModel();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["isAuthenticated"] = this.isAuthenticated;
        data["jwtSecurityToken"] = this.jwtSecurityToken;
        return data;
    }
}
export class AuthenticationResultModelApiTaskResult {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            this.taskGuid = _data["taskGuid"];
            this.payload = _data["payload"] ? AuthenticationResultModel.fromJS(_data["payload"]) : undefined;
            if (Array.isArray(_data["errors"])) {
                this.errors = [];
                for (let item of _data["errors"])
                    this.errors.push(ApiTaskResultError.fromJS(item));
            }
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new AuthenticationResultModelApiTaskResult();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["taskGuid"] = this.taskGuid;
        data["payload"] = this.payload ? this.payload.toJSON() : undefined;
        if (Array.isArray(this.errors)) {
            data["errors"] = [];
            for (let item of this.errors)
                data["errors"].push(item.toJSON());
        }
        return data;
    }
}
/** The authorization model */
export class AuthorizationModel {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            this.userName = _data["userName"];
            this.password = _data["password"];
            this.scope = _data["scope"];
            this.loginPageUrl = _data["loginPageUrl"];
            this.apiBaseUrl = _data["apiBaseUrl"];
            this.registrationPageUrl = _data["registrationPageUrl"];
            this.clientID = _data["clientID"];
            this.responseType = _data["responseType"];
            this.redirectUri = _data["redirectUri"];
            this.state = _data["state"];
            this.nonce = _data["nonce"];
            if (Array.isArray(_data["errors"])) {
                this.errors = [];
                for (let item of _data["errors"])
                    this.errors.push(item);
            }
            this.application = _data["application"] ? ApplicationModel.fromJS(_data["application"]) : undefined;
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new AuthorizationModel();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["userName"] = this.userName;
        data["password"] = this.password;
        data["scope"] = this.scope;
        data["loginPageUrl"] = this.loginPageUrl;
        data["apiBaseUrl"] = this.apiBaseUrl;
        data["registrationPageUrl"] = this.registrationPageUrl;
        data["clientID"] = this.clientID;
        data["responseType"] = this.responseType;
        data["redirectUri"] = this.redirectUri;
        data["state"] = this.state;
        data["nonce"] = this.nonce;
        if (Array.isArray(this.errors)) {
            data["errors"] = [];
            for (let item of this.errors)
                data["errors"].push(item);
        }
        data["application"] = this.application ? this.application.toJSON() : undefined;
        return data;
    }
}
/** New user model */
export class NewUserModel {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            this.applicationID = _data["applicationID"];
            this.emailAddress = _data["emailAddress"];
            this.userName = _data["userName"];
            this.password = _data["password"];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new NewUserModel();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["applicationID"] = this.applicationID;
        data["emailAddress"] = this.emailAddress;
        data["userName"] = this.userName;
        data["password"] = this.password;
        return data;
    }
}
/** New application user attribute */
export class ApplicationUserAttributeModel {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            this.attributeId = _data["attributeId"];
            this.value = _data["value"];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new ApplicationUserAttributeModel();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["attributeId"] = this.attributeId;
        data["value"] = this.value;
        return data;
    }
}
/** New application user model */
export class NewApplicationUserModel {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            this.applicationID = _data["applicationID"];
            this.emailAddress = _data["emailAddress"];
            this.userName = _data["userName"];
            this.firstName = _data["firstName"];
            this.lastName = _data["lastName"];
            if (Array.isArray(_data["attributes"])) {
                this.attributes = [];
                for (let item of _data["attributes"])
                    this.attributes.push(ApplicationUserAttributeModel.fromJS(item));
            }
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new NewApplicationUserModel();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["applicationID"] = this.applicationID;
        data["emailAddress"] = this.emailAddress;
        data["userName"] = this.userName;
        data["firstName"] = this.firstName;
        data["lastName"] = this.lastName;
        if (Array.isArray(this.attributes)) {
            data["attributes"] = [];
            for (let item of this.attributes)
                data["attributes"].push(item.toJSON());
        }
        return data;
    }
}
/** Update user attributes */
export class UpdateUserAttributesModel {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            this.createByUserJwtToken = _data["createByUserJwtToken"];
            this.userId = _data["userId"];
            this.clientID = _data["clientID"];
            this.clientSecret = _data["clientSecret"];
            if (Array.isArray(_data["attributes"])) {
                this.attributes = [];
                for (let item of _data["attributes"])
                    this.attributes.push(ApplicationUserAttributeModel.fromJS(item));
            }
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateUserAttributesModel();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["createByUserJwtToken"] = this.createByUserJwtToken;
        data["userId"] = this.userId;
        data["clientID"] = this.clientID;
        data["clientSecret"] = this.clientSecret;
        if (Array.isArray(this.attributes)) {
            data["attributes"] = [];
            for (let item of this.attributes)
                data["attributes"].push(item.toJSON());
        }
        return data;
    }
}
export class ActivatorEncodingTokenClaimModel {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            this.name = _data["name"];
            this.value = _data["value"];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new ActivatorEncodingTokenClaimModel();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["value"] = this.value;
        return data;
    }
}
export class ActivatorEncodingTokenModel {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            if (Array.isArray(_data["claims"])) {
                this.claims = [];
                for (let item of _data["claims"])
                    this.claims.push(ActivatorEncodingTokenClaimModel.fromJS(item));
            }
            this.client_id = _data["client_id"];
            this.client_secret = _data["client_secret"];
            this.id_token = _data["id_token"];
            this.activator_security_token = _data["activator_security_token"];
            this.state = _data["state"];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new ActivatorEncodingTokenModel();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.claims)) {
            data["claims"] = [];
            for (let item of this.claims)
                data["claims"].push(item.toJSON());
        }
        data["client_id"] = this.client_id;
        data["client_secret"] = this.client_secret;
        data["id_token"] = this.id_token;
        data["activator_security_token"] = this.activator_security_token;
        data["state"] = this.state;
        return data;
    }
}
export class UserProfileModel {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            this.userGuid = _data["userGuid"];
            this.emailAddress = _data["emailAddress"];
            this.userName = _data["userName"];
            this.isLockedOut = _data["isLockedOut"];
            this.createdDate = _data["createdDate"] ? new Date(_data["createdDate"].toString()) : undefined;
            this.lastLoginDate = _data["lastLoginDate"] ? new Date(_data["lastLoginDate"].toString()) : undefined;
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new UserProfileModel();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["userGuid"] = this.userGuid;
        data["emailAddress"] = this.emailAddress;
        data["userName"] = this.userName;
        data["isLockedOut"] = this.isLockedOut;
        data["createdDate"] = this.createdDate ? this.createdDate.toISOString() : undefined;
        data["lastLoginDate"] = this.lastLoginDate ? this.lastLoginDate.toISOString() : undefined;
        return data;
    }
}
export class UserProfileModelListApiTaskResult {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            this.taskGuid = _data["taskGuid"];
            if (Array.isArray(_data["payload"])) {
                this.payload = [];
                for (let item of _data["payload"])
                    this.payload.push(UserProfileModel.fromJS(item));
            }
            if (Array.isArray(_data["errors"])) {
                this.errors = [];
                for (let item of _data["errors"])
                    this.errors.push(ApiTaskResultError.fromJS(item));
            }
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new UserProfileModelListApiTaskResult();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["taskGuid"] = this.taskGuid;
        if (Array.isArray(this.payload)) {
            data["payload"] = [];
            for (let item of this.payload)
                data["payload"].push(item.toJSON());
        }
        if (Array.isArray(this.errors)) {
            data["errors"] = [];
            for (let item of this.errors)
                data["errors"].push(item.toJSON());
        }
        return data;
    }
}
export class UserAttributeModel {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            this.userGuid = _data["userGuid"];
            this.attributeGuid = _data["attributeGuid"];
            this.value = _data["value"];
            this.name = _data["name"];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new UserAttributeModel();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["userGuid"] = this.userGuid;
        data["attributeGuid"] = this.attributeGuid;
        data["value"] = this.value;
        data["name"] = this.name;
        return data;
    }
}
export class UserAttributeModelListApiTaskResult {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            this.taskGuid = _data["taskGuid"];
            if (Array.isArray(_data["payload"])) {
                this.payload = [];
                for (let item of _data["payload"])
                    this.payload.push(UserAttributeModel.fromJS(item));
            }
            if (Array.isArray(_data["errors"])) {
                this.errors = [];
                for (let item of _data["errors"])
                    this.errors.push(ApiTaskResultError.fromJS(item));
            }
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new UserAttributeModelListApiTaskResult();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["taskGuid"] = this.taskGuid;
        if (Array.isArray(this.payload)) {
            data["payload"] = [];
            for (let item of this.payload)
                data["payload"].push(item.toJSON());
        }
        if (Array.isArray(this.errors)) {
            data["errors"] = [];
            for (let item of this.errors)
                data["errors"].push(item.toJSON());
        }
        return data;
    }
}
export class ApiException extends Error {
    constructor(message, status, response, headers, result) {
        super();
        this.isApiException = true;
        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }
    static isApiException(obj) {
        return obj.isApiException === true;
    }
}
function throwException(message, status, response, headers, result) {
    if (result !== null && result !== undefined)
        throw result;
    else
        throw new ApiException(message, status, response, headers, null);
}
