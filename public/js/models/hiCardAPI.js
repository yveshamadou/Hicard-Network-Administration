/* tslint:disable */
/* eslint-disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.7.0.0 (NJsonSchema v10.1.24.0 (Newtonsoft.Json v11.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming
export class Client {
    constructor(baseUrl, http) {
        this.jsonParseReviver = undefined;
        this.http = http ? http : window;
        this.baseUrl = baseUrl ? baseUrl : "";
    }
    /**
     * Gets the list if US States
     * @param id (optional)
     * @return Success
     */
    states(id) {
        let url_ = this.baseUrl + "/api/admin/us/states?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "GET",
            headers: {
                "Accept": "text/plain",
                "securityToken": id
            }
        };
        return this.http.fetch(url_, options_).then((_response) => {
            return this.processStates(_response);
        });
    }
    processStates(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = ApiStateModelListControllerActionResult.fromJS(resultData200);
                return resultData200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Gets a cptcode by id
     * @param criteria The cptcode identifier
     * @return Success
     */
    cptcodes(criteria) {
        let url_ = this.baseUrl + "/api/cptcodes/{criteria}";
        if (criteria === undefined || criteria === null)
            throw new Error("The parameter 'criteria' must be defined.");
        url_ = url_.replace("{criteria}", encodeURIComponent("" + criteria));
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };
        return this.http.fetch(url_, options_).then((_response) => {
            return this.processCptcodes(_response);
        });
    }
    processCptcodes(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = ApiCPTCodeModelControllerActionResult.fromJS(resultData200);
                return resultData200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Gets a membermedicalconditionhistory by id
     * @param id The membermedicalconditionhistory identifier
     * @return Success
     */
    diagnostic(id) {
        let url_ = this.baseUrl + "/api/diagnostic/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };
        return this.http.fetch(url_, options_).then((_response) => {
            return this.processDiagnostic(_response);
        });
    }
    processDiagnostic(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = ApiMemberMedicalConditionHistoryModelControllerActionResult.fromJS(resultData200);
                return resultData200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Creates a new membermedicalconditionhistory
     * @param body (optional) The new membermedicalconditionhistory
     * @return Success
     */
    diagnostic2(body) {
        let url_ = this.baseUrl + "/api/diagnostic";
        url_ = url_.replace(/[?&]$/, "");
        const content_ = JSON.stringify(body);
        let options_ = {
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
                "Accept": "text/plain"
            }
        };
        return this.http.fetch(url_, options_).then((_response) => {
            return this.processDiagnostic2(_response);
        });
    }
    processDiagnostic2(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = GuidControllerActionResult.fromJS(resultData200);
                return resultData200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Updates a membermedicalconditionhistory
     * @param body (optional) The membermedicalconditionhistory to update
     * @return Success
     */
    diagnostic3(body) {
        let url_ = this.baseUrl + "/api/diagnostic";
        url_ = url_.replace(/[?&]$/, "");
        const content_ = JSON.stringify(body);
        let options_ = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "text/plain"
            }
        };
        return this.http.fetch(url_, options_).then((_response) => {
            return this.processDiagnostic3(_response);
        });
    }
    processDiagnostic3(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = GuidControllerActionResult.fromJS(resultData200);
                return resultData200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Send cards to HR contact
     * @return Success
     */
    sendMemberCardsToHR(id) {
        let url_ = this.baseUrl + "/api/groups/{id}/sendMemberCardsToHR";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "POST",
            headers: {
                "Accept": "text/plain"
            }
        };
        return this.http.fetch(url_, options_).then((_response) => {
            return this.processSendMemberCardsToHR(_response);
        });
    }
    processSendMemberCardsToHR(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = BooleanControllerActionResult.fromJS(resultData200);
                return resultData200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Gets a groupplan by id
     * @param id The groupplan identifier
     * @return Success
     */
    groupplans(id) {
        let url_ = this.baseUrl + "/api/groupplans/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };
        return this.http.fetch(url_, options_).then((_response) => {
            return this.processGroupplans(_response);
        });
    }
    processGroupplans(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = ApiGroupPlanModelControllerActionResult.fromJS(resultData200);
                return resultData200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Gets a icd10code by id
     * @param id The icd10code identifier
     * @return Success
     */
    icd10codes(id) {
        let url_ = this.baseUrl + "/api/icd10codes/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };
        return this.http.fetch(url_, options_).then((_response) => {
            return this.processIcd10codes(_response);
        });
    }
    processIcd10codes(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = ApiICD10CodeModelControllerActionResult.fromJS(resultData200);
                return resultData200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Find ICD10Code By Criteria
     * @return Success
     */
    find(criteria) {
        let url_ = this.baseUrl + "/api/icd10codes/{criteria}/find";
        if (criteria === undefined || criteria === null)
            throw new Error("The parameter 'criteria' must be defined.");
        url_ = url_.replace("{criteria}", encodeURIComponent("" + criteria));
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };
        return this.http.fetch(url_, options_).then((_response) => {
            return this.processFind(_response);
        });
    }
    processFind(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = ApiICD10CodeModelListControllerActionResult.fromJS(resultData200);
                return resultData200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Gets a medicalclaim by id
     * @param id The medicalclaim identifier
     * @return Success
     */
    medicalclaims(id) {
        let url_ = this.baseUrl + "/api/medicalclaims/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };
        return this.http.fetch(url_, options_).then((_response) => {
            return this.processMedicalclaims(_response);
        });
    }
    processMedicalclaims(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = ApiMedicalClaimModelControllerActionResult.fromJS(resultData200);
                return resultData200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Gets a single document
     * @return Success
     */
    medicalDocuments(id) {
        let url_ = this.baseUrl + "/api/medicalDocuments/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };
        return this.http.fetch(url_, options_).then((_response) => {
            return this.processMedicalDocuments(_response);
        });
    }
    processMedicalDocuments(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = ApiMedicalDocumentModelControllerActionResult.fromJS(resultData200);
                return resultData200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Creates a new medical document
     * @param body (optional)
     * @return Success
     */
    medicalDocuments2(body) {
        let url_ = this.baseUrl + "/api/medicalDocuments";
        url_ = url_.replace(/[?&]$/, "");
        const content_ = JSON.stringify(body);
        let options_ = {
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
                "Accept": "text/plain"
            }
        };
        return this.http.fetch(url_, options_).then((_response) => {
            return this.processMedicalDocuments2(_response);
        });
    }
    processMedicalDocuments2(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = GuidControllerActionResult.fromJS(resultData200);
                return resultData200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Emails the document
     * @param id The document id
     * @param body (optional) Email details
     * @return Success
     */
    email(id, body) {
        let url_ = this.baseUrl + "/api/medicalDocuments/{id}/email";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");
        const content_ = JSON.stringify(body);
        let options_ = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "text/plain"
            }
        };
        return this.http.fetch(url_, options_).then((_response) => {
            return this.processEmail(_response);
        });
    }
    processEmail(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = BooleanControllerActionResult.fromJS(resultData200);
                return resultData200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Sets document visibility
     * @param body (optional)
     * @return Success
     */
    visibility(id, body) {
        let url_ = this.baseUrl + "/api/medicalDocuments/{id}/visibility";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");
        const content_ = JSON.stringify(body);
        let options_ = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "text/plain"
            }
        };
        return this.http.fetch(url_, options_).then((_response) => {
            return this.processVisibility(_response);
        });
    }
    processVisibility(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = BooleanControllerActionResult.fromJS(resultData200);
                return resultData200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Get the documents history
     * @param id The document id
     * @return Success
     */
    history(id) {
        let url_ = this.baseUrl + "/api/medicalDocuments/{id}/history";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };
        return this.http.fetch(url_, options_).then((_response) => {
            return this.processHistory(_response);
        });
    }
    processHistory(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = ApiMedicalDocumentHistoryModelListControllerActionResult.fromJS(resultData200);
                return resultData200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Gets the document's base 64 content
     * @return Success
     */
    base64(id) {
        let url_ = this.baseUrl + "/api/medicalDocuments/{id}/base64";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };
        return this.http.fetch(url_, options_).then((_response) => {
            return this.processBase64(_response);
        });
    }
    processBase64(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = MedicalDocumentBytesApiModelControllerActionResult.fromJS(resultData200);
                return resultData200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Downloads a file
     * @return Success
     */
    download(id, securityToken) {
        let url_ = this.baseUrl + "/api/medicalDocuments/{id}/download/{securityToken}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        if (securityToken === undefined || securityToken === null)
            throw new Error("The parameter 'securityToken' must be defined.");
        url_ = url_.replace("{securityToken}", encodeURIComponent("" + securityToken));
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "GET",
            headers: {}
        };
        return this.http.fetch(url_, options_).then((_response) => {
            return this.processDownload(_response);
        });
    }
    processDownload(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                return;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Gets a medicaldocumenthistory by id
     * @param id The medicaldocumenthistory identifier
     * @return Success
     */
    medicaldocumenthistorys(id) {
        let url_ = this.baseUrl + "/api/medicaldocumenthistorys/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };
        return this.http.fetch(url_, options_).then((_response) => {
            return this.processMedicaldocumenthistorys(_response);
        });
    }
    processMedicaldocumenthistorys(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = ApiMedicalDocumentHistoryModelControllerActionResult.fromJS(resultData200);
                return resultData200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Creates a new medicaldocumenthistory
     * @param body (optional) The new medicaldocumenthistory
     * @return Success
     */
    medicaldocumenthistorys2(body) {
        let url_ = this.baseUrl + "/api/medicaldocumenthistorys";
        url_ = url_.replace(/[?&]$/, "");
        const content_ = JSON.stringify(body);
        let options_ = {
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
                "Accept": "text/plain"
            }
        };
        return this.http.fetch(url_, options_).then((_response) => {
            return this.processMedicaldocumenthistorys2(_response);
        });
    }
    processMedicaldocumenthistorys2(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = GuidControllerActionResult.fromJS(resultData200);
                return resultData200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Updates a medicaldocumenthistory
     * @param body (optional) The medicaldocumenthistory to update
     * @return Success
     */
    medicaldocumenthistorys3(body) {
        let url_ = this.baseUrl + "/api/medicaldocumenthistorys";
        url_ = url_.replace(/[?&]$/, "");
        const content_ = JSON.stringify(body);
        let options_ = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "text/plain"
            }
        };
        return this.http.fetch(url_, options_).then((_response) => {
            return this.processMedicaldocumenthistorys3(_response);
        });
    }
    processMedicaldocumenthistorys3(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = GuidControllerActionResult.fromJS(resultData200);
                return resultData200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Get all medicaldocumenttemplateMedicalDocumentTemplates
     * @return Success
     */
    medicaldocumenttemplates() {
        let url_ = this.baseUrl + "/api/medicaldocumenttemplates";
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };
        return this.http.fetch(url_, options_).then((_response) => {
            return this.processMedicaldocumenttemplates(_response);
        });
    }
    processMedicaldocumenttemplates(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = ApiMedicalDocumentTemplateModelListControllerActionResult.fromJS(resultData200);
                return resultData200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Creates a new medicaldocumenttemplate
     * @param body (optional) The new medicaldocumenttemplate
     * @return Success
     */
    medicaldocumenttemplates2(body) {
        let url_ = this.baseUrl + "/api/medicaldocumenttemplates";
        url_ = url_.replace(/[?&]$/, "");
        const content_ = JSON.stringify(body);
        let options_ = {
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
                "Accept": "text/plain"
            }
        };
        return this.http.fetch(url_, options_).then((_response) => {
            return this.processMedicaldocumenttemplates2(_response);
        });
    }
    processMedicaldocumenttemplates2(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = GuidControllerActionResult.fromJS(resultData200);
                return resultData200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Updates a medicaldocumenttemplate
     * @param body (optional) The medicaldocumenttemplate to update
     * @return Success
     */
    medicaldocumenttemplates3(body) {
        let url_ = this.baseUrl + "/api/medicaldocumenttemplates";
        url_ = url_.replace(/[?&]$/, "");
        const content_ = JSON.stringify(body);
        let options_ = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "text/plain"
            }
        };
        return this.http.fetch(url_, options_).then((_response) => {
            return this.processMedicaldocumenttemplates3(_response);
        });
    }
    processMedicaldocumenttemplates3(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = GuidControllerActionResult.fromJS(resultData200);
                return resultData200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Gets a medicaldocumenttemplate by id
     * @param id The medicaldocumenttemplate identifier
     * @return Success
     */
    medicaldocumenttemplates4(id) {
        let url_ = this.baseUrl + "/api/medicaldocumenttemplates/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };
        return this.http.fetch(url_, options_).then((_response) => {
            return this.processMedicaldocumenttemplates4(_response);
        });
    }
    processMedicaldocumenttemplates4(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = ApiMedicalDocumentTemplateModelControllerActionResult.fromJS(resultData200);
                return resultData200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Deletes a medicaldocumenttemplate
     * @param id The identifier of the medicaldocumenttemplate to delete
     * @return Success
     */
    medicaldocumenttemplates5(id) {
        let url_ = this.baseUrl + "/api/medicaldocumenttemplates/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "DELETE",
            headers: {
                "Accept": "text/plain"
            }
        };
        return this.http.fetch(url_, options_).then((_response) => {
            return this.processMedicaldocumenttemplates5(_response);
        });
    }
    processMedicaldocumenttemplates5(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = BooleanControllerActionResult.fromJS(resultData200);
                return resultData200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Gets the medical document template's html based on the provided precert
     * @return Success
     */
    html(id, precertId) {
        let url_ = this.baseUrl + "/api/medicaldocumenttemplates/{id}/precerts/{precertid}/html";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        if (precertId === undefined || precertId === null)
            throw new Error("The parameter 'precertId' must be defined.");
        url_ = url_.replace("{precertId}", encodeURIComponent("" + precertId));
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };
        return this.http.fetch(url_, options_).then((_response) => {
            return this.processHtml(_response);
        });
    }
    processHtml(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = StringControllerActionResult.fromJS(resultData200);
                return resultData200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Get all medicalfacilities
     * @return Success
     */
    medicalfacilities() {
        let url_ = this.baseUrl + "/api/medicalfacilities";
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };
        return this.http.fetch(url_, options_).then((_response) => {
            return this.processMedicalfacilities(_response);
        });
    }
    processMedicalfacilities(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = ApiMedicalFacilityModelListControllerActionResult.fromJS(resultData200);
                return resultData200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Creates a new medicalfacility
     * @param body (optional) The new medicalfacility
     * @return Success
     */
    medicalfacilities2(body) {
        let url_ = this.baseUrl + "/api/medicalfacilities";
        url_ = url_.replace(/[?&]$/, "");
        const content_ = JSON.stringify(body);
        let options_ = {
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
                "Accept": "text/plain"
            }
        };
        return this.http.fetch(url_, options_).then((_response) => {
            return this.processMedicalfacilities2(_response);
        });
    }
    processMedicalfacilities2(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = GuidControllerActionResult.fromJS(resultData200);
                return resultData200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Search a Facility By Criteria
     * @return Success
     */
    searchfacility(value) {
        let url_ = this.baseUrl + "/api/medicalfacilities/{value}/searchfacility";
        if (value === undefined || value === null)
            throw new Error("The parameter 'value' must be defined.");
        url_ = url_.replace("{value}", encodeURIComponent("" + value));
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };
        return this.http.fetch(url_, options_).then((_response) => {
            return this.processSearchfacility(_response);
        });
    }
    processSearchfacility(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = ApiMedicalFacilityModelListControllerActionResult.fromJS(resultData200);
                return resultData200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Gets the facilities pre-auth requests
     * @return Success
     */
    preAuthorizationRequests(id) {
        let url_ = this.baseUrl + "/api/medicalfacilities/{id}/preAuthorizationRequests";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };
        return this.http.fetch(url_, options_).then((_response) => {
            return this.processPreAuthorizationRequests(_response);
        });
    }
    processPreAuthorizationRequests(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = PreAuthorizationAPIModelListControllerActionResult.fromJS(resultData200);
                return resultData200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Gets a facility pre-auth request
     * @return Success
     */
    preAuthorizationRequests2(id, requestId) {
        let url_ = this.baseUrl + "/api/medicalfacilities/{id}/preAuthorizationRequests/{requestId}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        if (requestId === undefined || requestId === null)
            throw new Error("The parameter 'requestId' must be defined.");
        url_ = url_.replace("{requestId}", encodeURIComponent("" + requestId));
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };
        return this.http.fetch(url_, options_).then((_response) => {
            return this.processPreAuthorizationRequests2(_response);
        });
    }
    processPreAuthorizationRequests2(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = PreAuthorizationAPIModelControllerActionResult.fromJS(resultData200);
                return resultData200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Gets a facility pre-auth request documents
     * @param id Facility id
     * @param requestId Pre-Auth request id
     * @return Success
     */
    documents(id, requestId) {
        let url_ = this.baseUrl + "/api/medicalfacilities/{id}/preAuthorizationRequests/{requestId}/documents";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        if (requestId === undefined || requestId === null)
            throw new Error("The parameter 'requestId' must be defined.");
        url_ = url_.replace("{requestId}", encodeURIComponent("" + requestId));
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };
        return this.http.fetch(url_, options_).then((_response) => {
            return this.processDocuments(_response);
        });
    }
    processDocuments(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = ApiMedicalDocumentModelListControllerActionResult.fromJS(resultData200);
                return resultData200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Creates a pre-auth document
     * @param body (optional)
     * @return Success
     */
    documents2(id, requestId, body) {
        let url_ = this.baseUrl + "/api/medicalfacilities/{id}/preAuthorizationRequests/{requestId}/documents";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        if (requestId === undefined || requestId === null)
            throw new Error("The parameter 'requestId' must be defined.");
        url_ = url_.replace("{requestId}", encodeURIComponent("" + requestId));
        url_ = url_.replace(/[?&]$/, "");
        const content_ = JSON.stringify(body);
        let options_ = {
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
                "Accept": "text/plain"
            }
        };
        return this.http.fetch(url_, options_).then((_response) => {
            return this.processDocuments2(_response);
        });
    }
    processDocuments2(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = GuidControllerActionResult.fromJS(resultData200);
                return resultData200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Gets the procedures for the given pre-auth
     * @return Success
     */
    procedures(id, requestId) {
        let url_ = this.baseUrl + "/api/medicalfacilities/{id}/preAuthorizationRequests/{requestId}/procedures";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        if (requestId === undefined || requestId === null)
            throw new Error("The parameter 'requestId' must be defined.");
        url_ = url_.replace("{requestId}", encodeURIComponent("" + requestId));
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };
        return this.http.fetch(url_, options_).then((_response) => {
            return this.processProcedures(_response);
        });
    }
    processProcedures(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = ApiPreAuthProcedureModelListControllerActionResult.fromJS(resultData200);
                return resultData200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Gets pre-auth services
     * @return Success
     */
    services(id, requestId) {
        let url_ = this.baseUrl + "/api/medicalfacilities/{id}/preAuthorizationRequests/{requestId}/services";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        if (requestId === undefined || requestId === null)
            throw new Error("The parameter 'requestId' must be defined.");
        url_ = url_.replace("{requestId}", encodeURIComponent("" + requestId));
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };
        return this.http.fetch(url_, options_).then((_response) => {
            return this.processServices(_response);
        });
    }
    processServices(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = ApiPreAuthServiceModelListControllerActionResult.fromJS(resultData200);
                return resultData200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Gets pre-auth notes
     * @return Success
     */
    notes(id, requestId) {
        let url_ = this.baseUrl + "/api/medicalfacilities/{id}/preAuthorizationRequests/{requestId}/notes";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        if (requestId === undefined || requestId === null)
            throw new Error("The parameter 'requestId' must be defined.");
        url_ = url_.replace("{requestId}", encodeURIComponent("" + requestId));
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };
        return this.http.fetch(url_, options_).then((_response) => {
            return this.processNotes(_response);
        });
    }
    processNotes(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = ApiMedicalNoteModelListControllerActionResult.fromJS(resultData200);
                return resultData200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Creates a new note
     * @param body (optional)
     * @return Success
     */
    notes2(id, requestId, body) {
        let url_ = this.baseUrl + "/api/medicalfacilities/{id}/preAuthorizationRequests/{requestId}/notes";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        if (requestId === undefined || requestId === null)
            throw new Error("The parameter 'requestId' must be defined.");
        url_ = url_.replace("{requestId}", encodeURIComponent("" + requestId));
        url_ = url_.replace(/[?&]$/, "");
        const content_ = JSON.stringify(body);
        let options_ = {
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
                "Accept": "text/plain"
            }
        };
        return this.http.fetch(url_, options_).then((_response) => {
            return this.processNotes2(_response);
        });
    }
    processNotes2(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = GuidControllerActionResult.fromJS(resultData200);
                return resultData200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Gets a medicalfacility by id
     * @param id The medicalfacility identifier
     * @return Success
     */
    medicalfacilities3(id) {
        let url_ = this.baseUrl + "/api/medicalfacilities/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };
        return this.http.fetch(url_, options_).then((_response) => {
            return this.processMedicalfacilities3(_response);
        });
    }
    processMedicalfacilities3(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = ApiMedicalFacilityModelControllerActionResult.fromJS(resultData200);
                return resultData200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Get all medicalnetworkMedicalNetworks
     * @return Success
     */
    medicalnetworks() {
        let url_ = this.baseUrl + "/api/medicalnetworks";
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };
        return this.http.fetch(url_, options_).then((_response) => {
            return this.processMedicalnetworks(_response);
        });
    }
    processMedicalnetworks(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = ApiMedicalNetworkModelListControllerActionResult.fromJS(resultData200);
                return resultData200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Creates a new medicalnetwork
     * @param body (optional) The new medicalnetwork
     * @return Success
     */
    medicalnetworks2(body) {
        let url_ = this.baseUrl + "/api/medicalnetworks";
        url_ = url_.replace(/[?&]$/, "");
        const content_ = JSON.stringify(body);
        let options_ = {
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
                "Accept": "text/plain"
            }
        };
        return this.http.fetch(url_, options_).then((_response) => {
            return this.processMedicalnetworks2(_response);
        });
    }
    processMedicalnetworks2(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = GuidControllerActionResult.fromJS(resultData200);
                return resultData200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Updates a medicalnetwork
     * @param body (optional) The medicalnetwork to update
     * @return Success
     */
    medicalnetworks3(body) {
        let url_ = this.baseUrl + "/api/medicalnetworks";
        url_ = url_.replace(/[?&]$/, "");
        const content_ = JSON.stringify(body);
        let options_ = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "text/plain"
            }
        };
        return this.http.fetch(url_, options_).then((_response) => {
            return this.processMedicalnetworks3(_response);
        });
    }
    processMedicalnetworks3(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = GuidControllerActionResult.fromJS(resultData200);
                return resultData200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Gets a medicalnetwork by id
     * @param id The medicalnetwork identifier
     * @return Success
     */
    medicalnetworks4(id) {
        let url_ = this.baseUrl + "/api/medicalnetworks/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };
        return this.http.fetch(url_, options_).then((_response) => {
            return this.processMedicalnetworks4(_response);
        });
    }
    processMedicalnetworks4(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = ApiMedicalNetworkModelControllerActionResult.fromJS(resultData200);
                return resultData200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Deletes a medicalnetwork
     * @param id The identifier of the medicalnetwork to delete
     * @return Success
     */
    medicalnetworks5(id) {
        let url_ = this.baseUrl + "/api/medicalnetworks/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "DELETE",
            headers: {
                "Accept": "text/plain"
            }
        };
        return this.http.fetch(url_, options_).then((_response) => {
            return this.processMedicalnetworks5(_response);
        });
    }
    processMedicalnetworks5(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = BooleanControllerActionResult.fromJS(resultData200);
                return resultData200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Get medical network facilities
     * @param id The medical network id
     * @return Success
     */
    facilities(id) {
        let url_ = this.baseUrl + "/api/medicalnetworks/{id}/facilities";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };
        return this.http.fetch(url_, options_).then((_response) => {
            return this.processFacilities(_response);
        });
    }
    processFacilities(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = ApiMedicalFacilityModelListControllerActionResult.fromJS(resultData200);
                return resultData200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Updates a medical facility
     * @param id The medical network id
     * @param body (optional) The medical facility model
     * @return Success
     */
    facilities2(id, body) {
        let url_ = this.baseUrl + "/api/medicalnetworks/{id}/facilities";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");
        const content_ = JSON.stringify(body);
        let options_ = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "text/plain"
            }
        };
        return this.http.fetch(url_, options_).then((_response) => {
            return this.processFacilities2(_response);
        });
    }
    processFacilities2(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = BooleanControllerActionResult.fromJS(resultData200);
                return resultData200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Creates a medical network facility for a network
     * @param id The medical netwot id
     * @param body (optional) The medical facility model
     * @return Success
     */
    facilities3(id, body) {
        let url_ = this.baseUrl + "/api/medicalnetworks/{id}/facilities";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");
        const content_ = JSON.stringify(body);
        let options_ = {
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
                "Accept": "text/plain"
            }
        };
        return this.http.fetch(url_, options_).then((_response) => {
            return this.processFacilities3(_response);
        });
    }
    processFacilities3(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = GuidControllerActionResult.fromJS(resultData200);
                return resultData200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Gets the network's users
     * @return Success
     */
    users(id) {
        let url_ = this.baseUrl + "/api/medicalnetworks/{id}/users";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };
        return this.http.fetch(url_, options_).then((_response) => {
            return this.processUsers(_response);
        });
    }
    processUsers(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = ApiMedicalNetworkUserModelListControllerActionResult.fromJS(resultData200);
                return resultData200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Gets medical network facility providers
     * @return Success
     */
    providers(id, facilityId) {
        let url_ = this.baseUrl + "/api/medicalnetworks/{id}/facilities/{facilityId}/providers";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        if (facilityId === undefined || facilityId === null)
            throw new Error("The parameter 'facilityId' must be defined.");
        url_ = url_.replace("{facilityId}", encodeURIComponent("" + facilityId));
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };
        return this.http.fetch(url_, options_).then((_response) => {
            return this.processProviders(_response);
        });
    }
    processProviders(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = ApiMedicalProviderModelListControllerActionResult.fromJS(resultData200);
                return resultData200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Creates a new medical facility provider
     * @param body (optional)
     * @return Success
     */
    providers2(id, facilityId, body) {
        let url_ = this.baseUrl + "/api/medicalnetworks/{id}/facilities/{facilityId}/providers";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        if (facilityId === undefined || facilityId === null)
            throw new Error("The parameter 'facilityId' must be defined.");
        url_ = url_.replace("{facilityId}", encodeURIComponent("" + facilityId));
        url_ = url_.replace(/[?&]$/, "");
        const content_ = JSON.stringify(body);
        let options_ = {
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
                "Accept": "text/plain"
            }
        };
        return this.http.fetch(url_, options_).then((_response) => {
            return this.processProviders2(_response);
        });
    }
    processProviders2(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = GuidControllerActionResult.fromJS(resultData200);
                return resultData200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Updates a network facility's provider
     * @param body (optional)
     * @return Success
     */
    providers3(id, facilityId, body) {
        let url_ = this.baseUrl + "/api/medicalnetworks/{id}/facilities/{facilityId}/providers";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        if (facilityId === undefined || facilityId === null)
            throw new Error("The parameter 'facilityId' must be defined.");
        url_ = url_.replace("{facilityId}", encodeURIComponent("" + facilityId));
        url_ = url_.replace(/[?&]$/, "");
        const content_ = JSON.stringify(body);
        let options_ = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "text/plain"
            }
        };
        return this.http.fetch(url_, options_).then((_response) => {
            return this.processProviders3(_response);
        });
    }
    processProviders3(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = BooleanControllerActionResult.fromJS(resultData200);
                return resultData200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * @return Success
     */
    users2(id, facilityId) {
        let url_ = this.baseUrl + "/api/medicalnetworks/{id}/facilities/{facilityId}/users";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        if (facilityId === undefined || facilityId === null)
            throw new Error("The parameter 'facilityId' must be defined.");
        url_ = url_.replace("{facilityId}", encodeURIComponent("" + facilityId));
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };
        return this.http.fetch(url_, options_).then((_response) => {
            return this.processUsers2(_response);
        });
    }
    processUsers2(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = ApiMedicalNetworkUserModelListControllerActionResult.fromJS(resultData200);
                return resultData200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Associates a medical network facility with an existing provider
     * @return Success
     */
    providers4(id, facilityId, providerId) {
        let url_ = this.baseUrl + "/api/medicalnetworks/{id}/facilities/{facilityId}/providers/{providerId}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        if (facilityId === undefined || facilityId === null)
            throw new Error("The parameter 'facilityId' must be defined.");
        url_ = url_.replace("{facilityId}", encodeURIComponent("" + facilityId));
        if (providerId === undefined || providerId === null)
            throw new Error("The parameter 'providerId' must be defined.");
        url_ = url_.replace("{providerId}", encodeURIComponent("" + providerId));
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "POST",
            headers: {
                "Accept": "text/plain"
            }
        };
        return this.http.fetch(url_, options_).then((_response) => {
            return this.processProviders4(_response);
        });
    }
    processProviders4(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = BooleanControllerActionResult.fromJS(resultData200);
                return resultData200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Creates a user
     * @param body (optional)
     * @return Success
     */
    medicalnetworkusers(body) {
        let url_ = this.baseUrl + "/api/medicalnetworkusers";
        url_ = url_.replace(/[?&]$/, "");
        const content_ = JSON.stringify(body);
        let options_ = {
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
                "Accept": "text/plain"
            }
        };
        return this.http.fetch(url_, options_).then((_response) => {
            return this.processMedicalnetworkusers(_response);
        });
    }
    processMedicalnetworkusers(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = GuidControllerActionResult.fromJS(resultData200);
                return resultData200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Adds the user to the facility
     * @param body (optional)
     * @return Success
     */
    facilities4(id, facilityId, body) {
        let url_ = this.baseUrl + "/api/medicalnetworkusers/{id}/facilities/{facilityId}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        if (facilityId === undefined || facilityId === null)
            throw new Error("The parameter 'facilityId' must be defined.");
        url_ = url_.replace("{facilityId}", encodeURIComponent("" + facilityId));
        url_ = url_.replace(/[?&]$/, "");
        const content_ = JSON.stringify(body);
        let options_ = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "text/plain"
            }
        };
        return this.http.fetch(url_, options_).then((_response) => {
            return this.processFacilities4(_response);
        });
    }
    processFacilities4(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = BooleanControllerActionResult.fromJS(resultData200);
                return resultData200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Associates the user with the network
     * @param body (optional)
     * @return Success
     */
    networks(id, networkId, body) {
        let url_ = this.baseUrl + "/api/medicalnetworkusers/{id}/networks/{networkId}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        if (networkId === undefined || networkId === null)
            throw new Error("The parameter 'networkId' must be defined.");
        url_ = url_.replace("{networkId}", encodeURIComponent("" + networkId));
        url_ = url_.replace(/[?&]$/, "");
        const content_ = JSON.stringify(body);
        let options_ = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "text/plain"
            }
        };
        return this.http.fetch(url_, options_).then((_response) => {
            return this.processNetworks(_response);
        });
    }
    processNetworks(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = BooleanControllerActionResult.fromJS(resultData200);
                return resultData200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Get the user's list of medical facilities
     * @param id The medical network id
     * @return Success
     */
    facilities5(id) {
        let url_ = this.baseUrl + "/api/medicalnetworkusers/{id}/facilities";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };
        return this.http.fetch(url_, options_).then((_response) => {
            return this.processFacilities5(_response);
        });
    }
    processFacilities5(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = ApiMedicalFacilityModelListControllerActionResult.fromJS(resultData200);
                return resultData200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Gets all networks by user
     * @return Success
     */
    networks2(id) {
        let url_ = this.baseUrl + "/api/medicalnetworkusers/{id}/networks";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };
        return this.http.fetch(url_, options_).then((_response) => {
            return this.processNetworks2(_response);
        });
    }
    processNetworks2(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = ApiMedicalNetworkModelListControllerActionResult.fromJS(resultData200);
                return resultData200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Gets plan data for a given plan
     * @return Success
     */
    plandetails(id) {
        let url_ = this.baseUrl + "/api/medicalplans/{id}/plandetails";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };
        return this.http.fetch(url_, options_).then((_response) => {
            return this.processPlandetails(_response);
        });
    }
    processPlandetails(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = ApiMedicalPlanDetailModelListControllerActionResult.fromJS(resultData200);
                return resultData200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Update plan detail data
     * @param id Plan id
     * @param body (optional) Plan detail data
     * @return Success
     */
    plandetails2(id, body) {
        let url_ = this.baseUrl + "/api/medicalplans/{id}/plandetails";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");
        const content_ = JSON.stringify(body);
        let options_ = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "text/plain"
            }
        };
        return this.http.fetch(url_, options_).then((_response) => {
            return this.processPlandetails2(_response);
        });
    }
    processPlandetails2(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = BooleanControllerActionResult.fromJS(resultData200);
                return resultData200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Register a newProvider
     * @param body (optional)
     * @return Success
     */
    medicalproviders(body) {
        let url_ = this.baseUrl + "/api/medicalproviders";
        url_ = url_.replace(/[?&]$/, "");
        const content_ = JSON.stringify(body);
        let options_ = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "text/plain"
            }
        };
        return this.http.fetch(url_, options_).then((_response) => {
            return this.processMedicalproviders(_response);
        });
    }
    processMedicalproviders(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = GuidControllerActionResult.fromJS(resultData200);
                return resultData200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Register a newProvider
     * @param body (optional)
     * @return Success
     */
    register(body) {
        let url_ = this.baseUrl + "/api/medicalproviders/register";
        url_ = url_.replace(/[?&]$/, "");
        const content_ = JSON.stringify(body);
        let options_ = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "text/plain"
            }
        };
        return this.http.fetch(url_, options_).then((_response) => {
            return this.processRegister(_response);
        });
    }
    processRegister(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = GuidControllerActionResult.fromJS(resultData200);
                return resultData200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Create a newProvider
     * @param body (optional)
     * @return Success
     */
    create(body) {
        let url_ = this.baseUrl + "/api/medicalproviders/create";
        url_ = url_.replace(/[?&]$/, "");
        const content_ = JSON.stringify(body);
        let options_ = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "text/plain"
            }
        };
        return this.http.fetch(url_, options_).then((_response) => {
            return this.processCreate(_response);
        });
    }
    processCreate(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = GuidControllerActionResult.fromJS(resultData200);
                return resultData200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Get's All Specialities to Provider
     * @return Success
     */
    specialties(id) {
        let url_ = this.baseUrl + "/api/medicalproviders/specialties";
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "GET",
            headers: {
                "Accept": "text/plain",
                "securityToken": id
            }
        };
        return this.http.fetch(url_, options_).then((_response) => {
            return this.processSpecialties(_response);
        });
    }
    processSpecialties(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = MedicalSpecialtyModelListControllerActionResult.fromJS(resultData200);
                return resultData200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Find all providers (registered and non registered)
     * @return Success
     */
    search(value) {
        let url_ = this.baseUrl + "/api/medicalproviders/{value}/search";
        if (value === undefined || value === null)
            throw new Error("The parameter 'value' must be defined.");
        url_ = url_.replace("{value}", encodeURIComponent("" + value));
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };
        return this.http.fetch(url_, options_).then((_response) => {
            return this.processSearch(_response);
        });
    }
    processSearch(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = SearchDoctorModelListControllerActionResult.fromJS(resultData200);
                return resultData200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Advanced search
     * @param body (optional)
     * @return Success
     */
    advancedSearch(body) {
        let url_ = this.baseUrl + "/api/medicalproviders/advancedSearch";
        url_ = url_.replace(/[?&]$/, "");
        const content_ = JSON.stringify(body);
        let options_ = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "text/plain"
            }
        };
        return this.http.fetch(url_, options_).then((_response) => {
            return this.processAdvancedSearch(_response);
        });
    }
    processAdvancedSearch(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = SearchDoctorModelListControllerActionResult.fromJS(resultData200);
                return resultData200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Search only registered providers
     * @return Success
     */
    searchprovider(value) {
        let url_ = this.baseUrl + "/api/medicalproviders/{value}/searchprovider";
        if (value === undefined || value === null)
            throw new Error("The parameter 'value' must be defined.");
        url_ = url_.replace("{value}", encodeURIComponent("" + value));
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };
        return this.http.fetch(url_, options_).then((_response) => {
            return this.processSearchprovider(_response);
        });
    }
    processSearchprovider(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = SearchDoctorModelListControllerActionResult.fromJS(resultData200);
                return resultData200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * @return Success
     */
    doctorinformation(id) {
        let url_ = this.baseUrl + "/api/medicalproviders/{id}/doctorinformation";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };
        return this.http.fetch(url_, options_).then((_response) => {
            return this.processDoctorinformation(_response);
        });
    }
    processDoctorinformation(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = SearchDoctorModelControllerActionResult.fromJS(resultData200);
                return resultData200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Get all medicalservices
     * @return Success
     */
    medicalservices() {
        let url_ = this.baseUrl + "/api/medicalservices";
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };
        return this.http.fetch(url_, options_).then((_response) => {
            return this.processMedicalservices(_response);
        });
    }
    processMedicalservices(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = ApiMedicalServiceModelListControllerActionResult.fromJS(resultData200);
                return resultData200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Gets a membermedicationhistory by id
     * @param id The membermedicationhistory identifier
     * @return Success
     */
    medicationhistorys(id) {
        let url_ = this.baseUrl + "/api/medicationhistorys/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };
        return this.http.fetch(url_, options_).then((_response) => {
            return this.processMedicationhistorys(_response);
        });
    }
    processMedicationhistorys(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = ApiMemberMedicationHistoryModelControllerActionResult.fromJS(resultData200);
                return resultData200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Creates a new membermedicationhistory
     * @param body (optional) The new membermedicationhistory
     * @return Success
     */
    medicationhistorys2(body) {
        let url_ = this.baseUrl + "/api/medicationhistorys";
        url_ = url_.replace(/[?&]$/, "");
        const content_ = JSON.stringify(body);
        let options_ = {
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
                "Accept": "text/plain"
            }
        };
        return this.http.fetch(url_, options_).then((_response) => {
            return this.processMedicationhistorys2(_response);
        });
    }
    processMedicationhistorys2(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = GuidControllerActionResult.fromJS(resultData200);
                return resultData200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Updates a membermedicationhistory
     * @param body (optional) The membermedicationhistory to update
     * @return Success
     */
    medicationhistorys3(body) {
        let url_ = this.baseUrl + "/api/medicationhistorys";
        url_ = url_.replace(/[?&]$/, "");
        const content_ = JSON.stringify(body);
        let options_ = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "text/plain"
            }
        };
        return this.http.fetch(url_, options_).then((_response) => {
            return this.processMedicationhistorys3(_response);
        });
    }
    processMedicationhistorys3(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = GuidControllerActionResult.fromJS(resultData200);
                return resultData200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Get all memberallergyMemberAllergies
     * @param id The member id
     * @return Success
     */
    allergies(id) {
        let url_ = this.baseUrl + "/api/members/{id}/allergies";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };
        return this.http.fetch(url_, options_).then((_response) => {
            return this.processAllergies(_response);
        });
    }
    processAllergies(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = ApiMemberAllergyModelListControllerActionResult.fromJS(resultData200);
                return resultData200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Creates a new memberallergy
     * @param id The member id
     * @param body (optional) The new memberallergy
     * @return Success
     */
    allergies2(id, body) {
        let url_ = this.baseUrl + "/api/members/{id}/allergies";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");
        const content_ = JSON.stringify(body);
        let options_ = {
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
                "Accept": "text/plain"
            }
        };
        return this.http.fetch(url_, options_).then((_response) => {
            return this.processAllergies2(_response);
        });
    }
    processAllergies2(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = GuidControllerActionResult.fromJS(resultData200);
                return resultData200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Updates a memberallergy
     * @param id The member id
     * @param body (optional) The memberallergy to update
     * @return Success
     */
    allergies3(id, body) {
        let url_ = this.baseUrl + "/api/members/{id}/allergies";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");
        const content_ = JSON.stringify(body);
        let options_ = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "text/plain"
            }
        };
        return this.http.fetch(url_, options_).then((_response) => {
            return this.processAllergies3(_response);
        });
    }
    processAllergies3(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = GuidControllerActionResult.fromJS(resultData200);
                return resultData200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Gets a memberallergy by id
     * @param allergyId The memberallergy identifier
     * @return Success
     */
    allergies4(allergyId, id) {
        let url_ = this.baseUrl + "/api/members/{id}/allergies/{allergyId}";
        if (allergyId === undefined || allergyId === null)
            throw new Error("The parameter 'allergyId' must be defined.");
        url_ = url_.replace("{allergyId}", encodeURIComponent("" + allergyId));
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };
        return this.http.fetch(url_, options_).then((_response) => {
            return this.processAllergies4(_response);
        });
    }
    processAllergies4(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = ApiMemberAllergyModelControllerActionResult.fromJS(resultData200);
                return resultData200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Deletes a member allergy
     * @param id The member id
     * @param allergyId The allergie id
     * @return Success
     */
    allergies5(id, allergyId) {
        let url_ = this.baseUrl + "/api/members/{id}/allergies/{allergyId}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        if (allergyId === undefined || allergyId === null)
            throw new Error("The parameter 'allergyId' must be defined.");
        url_ = url_.replace("{allergyId}", encodeURIComponent("" + allergyId));
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "DELETE",
            headers: {
                "Accept": "text/plain"
            }
        };
        return this.http.fetch(url_, options_).then((_response) => {
            return this.processAllergies5(_response);
        });
    }
    processAllergies5(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = BooleanControllerActionResult.fromJS(resultData200);
                return resultData200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Gets a membercard by id
     * @param id The membercard identifier
     * @return Success
     */
    membercards(id) {
        let url_ = this.baseUrl + "/api/membercards/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };
        return this.http.fetch(url_, options_).then((_response) => {
            return this.processMembercards(_response);
        });
    }
    processMembercards(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = ApiMemberCardModelControllerActionResult.fromJS(resultData200);
                return resultData200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Gets the HTML representation of a member card
     * @param id The card id
     * @return Success
     */
    html2(id) {
        let url_ = this.baseUrl + "/api/membercards/{id}/html";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };
        return this.http.fetch(url_, options_).then((_response) => {
            return this.processHtml2(_response);
        });
    }
    processHtml2(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = StringControllerActionResult.fromJS(resultData200);
                return resultData200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Creates new cards for new eligibility records
     * @return Success
     */
    processOutstandingCards() {
        let url_ = this.baseUrl + "/api/membercards/processOutstandingCards";
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "POST",
            headers: {
                "Accept": "text/plain"
            }
        };
        return this.http.fetch(url_, options_).then((_response) => {
            return this.processProcessOutstandingCards(_response);
        });
    }
    processProcessOutstandingCards(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = BooleanControllerActionResult.fromJS(resultData200);
                return resultData200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Get a member emergency contacts
     * @param id The member id
     * @return Success
     */
    emergencycontacts(id) {
        let url_ = this.baseUrl + "/api/members/{id}/emergencycontacts";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };
        return this.http.fetch(url_, options_).then((_response) => {
            return this.processEmergencycontacts(_response);
        });
    }
    processEmergencycontacts(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = ApiMemberEmergencyContactModelListControllerActionResult.fromJS(resultData200);
                return resultData200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Creates a new emergency contact
     * @param id The member id
     * @param body (optional) The new contact
     * @return Success
     */
    emergencycontacts2(id, body) {
        let url_ = this.baseUrl + "/api/members/{id}/emergencycontacts";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");
        const content_ = JSON.stringify(body);
        let options_ = {
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
                "Accept": "text/plain"
            }
        };
        return this.http.fetch(url_, options_).then((_response) => {
            return this.processEmergencycontacts2(_response);
        });
    }
    processEmergencycontacts2(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = GuidControllerActionResult.fromJS(resultData200);
                return resultData200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Updates a member emergency contact
     * @param id The member id
     * @param body (optional) The emergency contact record
     * @return Success
     */
    emergencycontacts3(id, body) {
        let url_ = this.baseUrl + "/api/members/{id}/emergencycontacts";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");
        const content_ = JSON.stringify(body);
        let options_ = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "text/plain"
            }
        };
        return this.http.fetch(url_, options_).then((_response) => {
            return this.processEmergencycontacts3(_response);
        });
    }
    processEmergencycontacts3(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = GuidControllerActionResult.fromJS(resultData200);
                return resultData200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Gets a members emergency contact by id
     * @param id The member id
     * @param contactId The contact id
     * @return Success
     */
    emergencycontacts4(id, contactId) {
        let url_ = this.baseUrl + "/api/members/{id}/emergencycontacts/{contactId}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        if (contactId === undefined || contactId === null)
            throw new Error("The parameter 'contactId' must be defined.");
        url_ = url_.replace("{contactId}", encodeURIComponent("" + contactId));
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };
        return this.http.fetch(url_, options_).then((_response) => {
            return this.processEmergencycontacts4(_response);
        });
    }
    processEmergencycontacts4(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = ApiMemberEmergencyContactModelControllerActionResult.fromJS(resultData200);
                return resultData200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Deletes a member allergy
     * @param id The member id
     * @param contactId The contact id
     * @return Success
     */
    emergencycontacts5(id, contactId) {
        let url_ = this.baseUrl + "/api/members/{id}/emergencycontacts/{contactId}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        if (contactId === undefined || contactId === null)
            throw new Error("The parameter 'contactId' must be defined.");
        url_ = url_.replace("{contactId}", encodeURIComponent("" + contactId));
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "DELETE",
            headers: {
                "Accept": "text/plain"
            }
        };
        return this.http.fetch(url_, options_).then((_response) => {
            return this.processEmergencycontacts5(_response);
        });
    }
    processEmergencycontacts5(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = BooleanControllerActionResult.fromJS(resultData200);
                return resultData200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Gets a member by id
     * @param id The member identifier
     * @return Success
     */
    members(id) {
        let url_ = this.baseUrl + "/api/members/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };
        return this.http.fetch(url_, options_).then((_response) => {
            return this.processMembers(_response);
        });
    }
    processMembers(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = ApiMemberModelControllerActionResult.fromJS(resultData200);
                return resultData200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Gets the member contact information
     * @return Success
     */
    contactInfo(id) {
        let url_ = this.baseUrl + "/api/members/{id}/contactInfo";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };
        return this.http.fetch(url_, options_).then((_response) => {
            return this.processContactInfo(_response);
        });
    }
    processContactInfo(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = ApiMemberContactModelControllerActionResult.fromJS(resultData200);
                return resultData200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Get all dependent by memberGuid
     * @return Success
     */
    dependents(id) {
        let url_ = this.baseUrl + "/api/members/{id}/dependents";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };
        return this.http.fetch(url_, options_).then((_response) => {
            return this.processDependents(_response);
        });
    }
    processDependents(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = ApiMemberModelControllerActionResult.fromJS(resultData200);
                return resultData200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Get eligibility Fact by memberGuid
     * @return Success
     */
    eligibilityFact(id) {
        let url_ = this.baseUrl + "/api/members/{id}/eligibilityFact";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };
        return this.http.fetch(url_, options_).then((_response) => {
            return this.processEligibilityFact(_response);
        });
    }
    processEligibilityFact(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = MemberEligibilityFactControllerActionResult.fromJS(resultData200);
                return resultData200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Gets a member plan
     * @param id The member identifier
     * @return Success
     */
    plan(id) {
        let url_ = this.baseUrl + "/api/members/{id}/plan";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };
        return this.http.fetch(url_, options_).then((_response) => {
            return this.processPlan(_response);
        });
    }
    processPlan(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = ApiGroupPlanModelControllerActionResult.fromJS(resultData200);
                return resultData200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Get  MedicalPlanDetail by MemberGuid
     * @return Success
     */
    details(id, planId) {
        let url_ = this.baseUrl + "/api/members/{id}/plans/{planId}/details";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        if (planId === undefined || planId === null)
            throw new Error("The parameter 'planId' must be defined.");
        url_ = url_.replace("{planId}", encodeURIComponent("" + planId));
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };
        return this.http.fetch(url_, options_).then((_response) => {
            return this.processDetails(_response);
        });
    }
    processDetails(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = ApiMedicalPlanDetailModelListControllerActionResult.fromJS(resultData200);
                return resultData200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Get  MedicalPlanDetail by MemberGuid
     * @return Success
     */
    plandetail(id) {
        let url_ = this.baseUrl + "/api/members/{id}/plandetail";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };
        return this.http.fetch(url_, options_).then((_response) => {
            return this.processPlandetail(_response);
        });
    }
    processPlandetail(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = ApiMedicalPlanDetailModelListControllerActionResult.fromJS(resultData200);
                return resultData200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Get's all Medical Claims by memberguid
     * @return Success
     */
    claims(id) {
        let url_ = this.baseUrl + "/api/members/{id}/claims";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };
        return this.http.fetch(url_, options_).then((_response) => {
            return this.processClaims(_response);
        });
    }
    processClaims(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = ApiMedicalClaimModelControllerActionResult.fromJS(resultData200);
                return resultData200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Gets member rx claims
     * @return Success
     */
    rxClaims(id) {
        let url_ = this.baseUrl + "/api/members/{id}/rxClaims";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };
        return this.http.fetch(url_, options_).then((_response) => {
            return this.processRxClaims(_response);
        });
    }
    processRxClaims(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = ApiRxClaimModelControllerActionResult.fromJS(resultData200);
                return resultData200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Gets a member's claim details
     * @param id The member record guid
     * @param claimNumber The claim number
     * @return Success
     */
    details2(id, claimNumber) {
        let url_ = this.baseUrl + "/api/members/{id}/claims/{claimNumber}/details";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        if (claimNumber === undefined || claimNumber === null)
            throw new Error("The parameter 'claimNumber' must be defined.");
        url_ = url_.replace("{claimNumber}", encodeURIComponent("" + claimNumber));
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };
        return this.http.fetch(url_, options_).then((_response) => {
            return this.processDetails2(_response);
        });
    }
    processDetails2(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = ApiMedicalClaimLineItemModelListControllerActionResult.fromJS(resultData200);
                return resultData200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Get's all card to member by memberguid
     * @return Success
     */
    cards(id) {
        let url_ = this.baseUrl + "/api/members/{id}/cards";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };
        return this.http.fetch(url_, options_).then((_response) => {
            return this.processCards(_response);
        });
    }
    processCards(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = ApiMemberCardModelControllerActionResult.fromJS(resultData200);
                return resultData200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Gets the HTML representation of a member card
     * @param id The member id
     * @param cardId The card id
     * @return Success
     */
    html3(id, cardId) {
        let url_ = this.baseUrl + "/api/members/{id}/cards/{cardId}/html";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        if (cardId === undefined || cardId === null)
            throw new Error("The parameter 'cardId' must be defined.");
        url_ = url_.replace("{cardId}", encodeURIComponent("" + cardId));
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };
        return this.http.fetch(url_, options_).then((_response) => {
            return this.processHtml3(_response);
        });
    }
    processHtml3(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = StringControllerActionResult.fromJS(resultData200);
                return resultData200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Get MFA by memberGuid
     * @return Success
     */
    mfa(id) {
        let url_ = this.baseUrl + "/api/members/{id}/mfa";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };
        return this.http.fetch(url_, options_).then((_response) => {
            return this.processMfa(_response);
        });
    }
    processMfa(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = MFAModelControllerActionResult.fromJS(resultData200);
                return resultData200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Update MFA Member To MemberGuid
     * @param body (optional)
     * @return Success
     */
    mfa2(id, body) {
        let url_ = this.baseUrl + "/api/members/{id}/mfa";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");
        const content_ = JSON.stringify(body);
        let options_ = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "text/plain"
            }
        };
        return this.http.fetch(url_, options_).then((_response) => {
            return this.processMfa2(_response);
        });
    }
    processMfa2(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = GuidControllerActionResult.fromJS(resultData200);
                return resultData200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Get TPA information By memberGuid
     * @return Success
     */
    tpa(id) {
        let url_ = this.baseUrl + "/api/members/{id}/tpa";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };
        return this.http.fetch(url_, options_).then((_response) => {
            return this.processTpa(_response);
        });
    }
    processTpa(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = TPAModelControllerActionResult.fromJS(resultData200);
                return resultData200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * find member by recordguid
     * @return Success
     */
    find2(id) {
        let url_ = this.baseUrl + "/api/members/{id}/find";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };
        return this.http.fetch(url_, options_).then((_response) => {
            return this.processFind2(_response);
        });
    }
    processFind2(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = FindMemberModelControllerActionResult.fromJS(resultData200);
                return resultData200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Get's all diagnotics by memberguid
     * @return Success
     */
    diagnotics(id) {
        let url_ = this.baseUrl + "/api/members/{id}/diagnotics";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };
        return this.http.fetch(url_, options_).then((_response) => {
            return this.processDiagnotics(_response);
        });
    }
    processDiagnotics(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = ApiMemberMedicalConditionHistoryModelControllerActionResult.fromJS(resultData200);
                return resultData200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Gets the member's claims diagnostics
     * @return Success
     */
    claimsDiagnostics(id) {
        let url_ = this.baseUrl + "/api/members/{id}/claimsDiagnostics";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };
        return this.http.fetch(url_, options_).then((_response) => {
            return this.processClaimsDiagnostics(_response);
        });
    }
    processClaimsDiagnostics(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = ApiMedicalClaimDiagnosticModelControllerActionResult.fromJS(resultData200);
                return resultData200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Get's Medication by memberGuid
     * @return Success
     */
    medications(id) {
        let url_ = this.baseUrl + "/api/members/{id}/medications";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };
        return this.http.fetch(url_, options_).then((_response) => {
            return this.processMedications(_response);
        });
    }
    processMedications(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = ApiMemberMedicationHistoryModelControllerActionResult.fromJS(resultData200);
                return resultData200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Get ProfileImage by memberGuid
     * @return Success
     */
    profileImage(id) {
        let url_ = this.baseUrl + "/api/members/{id}/profileImage";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };
        return this.http.fetch(url_, options_).then((_response) => {
            return this.processProfileImage(_response);
        });
    }
    processProfileImage(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = FileModelControllerActionResult.fromJS(resultData200);
                return resultData200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Update Profile Image to Member
     * @param body (optional)
     * @return Success
     */
    profileImage2(id, body) {
        let url_ = this.baseUrl + "/api/members/{id}/profileImage";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");
        const content_ = JSON.stringify(body);
        let options_ = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "text/plain"
            }
        };
        return this.http.fetch(url_, options_).then((_response) => {
            return this.processProfileImage2(_response);
        });
    }
    processProfileImage2(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = GuidControllerActionResult.fromJS(resultData200);
                return resultData200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * verify member information
     * @param body (optional)
     * @return Success
     */
    verifyinformation(body) {
        let url_ = this.baseUrl + "/api/members/verifyinformation";
        url_ = url_.replace(/[?&]$/, "");
        const content_ = JSON.stringify(body);
        let options_ = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "text/plain"
            }
        };
        return this.http.fetch(url_, options_).then((_response) => {
            return this.processVerifyinformation(_response);
        });
    }
    processVerifyinformation(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = MemberModelControllerActionResult.fromJS(resultData200);
                return resultData200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Update attribute IsRegistered
     * @param body (optional)
     * @return Success
     */
    isregistered(body) {
        let url_ = this.baseUrl + "/api/members/isregistered";
        url_ = url_.replace(/[?&]$/, "");
        const content_ = JSON.stringify(body);
        let options_ = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "text/plain"
            }
        };
        return this.http.fetch(url_, options_).then((_response) => {
            return this.processIsregistered(_response);
        });
    }
    processIsregistered(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = GuidControllerActionResult.fromJS(resultData200);
                return resultData200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Orders a member card
     * @return Success
     */
    orderCard(id) {
        let url_ = this.baseUrl + "/api/members/{id}/orderCard";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "POST",
            headers: {
                "Accept": "text/plain"
            }
        };
        return this.http.fetch(url_, options_).then((_response) => {
            return this.processOrderCard(_response);
        });
    }
    processOrderCard(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = BooleanControllerActionResult.fromJS(resultData200);
                return resultData200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Send the portal invitation to the member
     * @return Success
     */
    sendPortalInvitation(id) {
        let url_ = this.baseUrl + "/api/members/{id}/sendPortalInvitation";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "POST",
            headers: {
                "Accept": "text/plain"
            }
        };
        return this.http.fetch(url_, options_).then((_response) => {
            return this.processSendPortalInvitation(_response);
        });
    }
    processSendPortalInvitation(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = BooleanControllerActionResult.fromJS(resultData200);
                return resultData200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * @return Success
     */
    preAuthRequests(id) {
        let url_ = this.baseUrl + "/api/preAuthRequests/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };
        return this.http.fetch(url_, options_).then((_response) => {
            return this.processPreAuthRequests(_response);
        });
    }
    processPreAuthRequests(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = PreAuthorizationRequestAPIModelControllerActionResult.fromJS(resultData200);
                return resultData200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Creates a Pre-Authorization request for one or many medical procedures
     * @param body (optional)
     * @return Success
     */
    preAuthRequests2(body) {
        let url_ = this.baseUrl + "/api/preAuthRequests/preAuthRequests";
        url_ = url_.replace(/[?&]$/, "");
        const content_ = JSON.stringify(body);
        let options_ = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "text/plain"
            }
        };
        return this.http.fetch(url_, options_).then((_response) => {
            return this.processPreAuthRequests2(_response);
        });
    }
    processPreAuthRequests2(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = GuidControllerActionResult.fromJS(resultData200);
                return resultData200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Deny a pre-auth request
     * @param id The pre-auth request id
     * @param body (optional) The letter content
     * @return Success
     */
    deny(id, body) {
        let url_ = this.baseUrl + "/api/preAuthRequests/{id}/deny";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");
        const content_ = JSON.stringify(body);
        let options_ = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "text/plain"
            }
        };
        return this.http.fetch(url_, options_).then((_response) => {
            return this.processDeny(_response);
        });
    }
    processDeny(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = GuidControllerActionResult.fromJS(resultData200);
                return resultData200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Approve a pre-auth request
     * @param id The pre-auth request id
     * @param body (optional) The letter content
     * @return Success
     */
    approve(id, body) {
        let url_ = this.baseUrl + "/api/preAuthRequests/{id}/approve";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");
        const content_ = JSON.stringify(body);
        let options_ = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "text/plain"
            }
        };
        return this.http.fetch(url_, options_).then((_response) => {
            return this.processApprove(_response);
        });
    }
    processApprove(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = GuidControllerActionResult.fromJS(resultData200);
                return resultData200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Gets the list of documents for the pre-auth request
     * @param id The pre-auth id
     * @return Success
     */
    documents3(id) {
        let url_ = this.baseUrl + "/api/preAuthRequests/{id}/documents";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };
        return this.http.fetch(url_, options_).then((_response) => {
            return this.processDocuments3(_response);
        });
    }
    processDocuments3(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = ApiMedicalDocumentModelListControllerActionResult.fromJS(resultData200);
                return resultData200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Gets the leter template
     * @param id The pre-auth request id
     * @param name The template name
     * @return Success
     */
    letterTemplates(id, name) {
        let url_ = this.baseUrl + "/api/preAuthRequests/{id}/letterTemplates/{name}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        if (name === undefined || name === null)
            throw new Error("The parameter 'name' must be defined.");
        url_ = url_.replace("{name}", encodeURIComponent("" + name));
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "POST",
            headers: {
                "Accept": "text/plain"
            }
        };
        return this.http.fetch(url_, options_).then((_response) => {
            return this.processLetterTemplates(_response);
        });
    }
    processLetterTemplates(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = StringControllerActionResult.fromJS(resultData200);
                return resultData200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
}
/** Represents an error */
export class ControllerActionResultError {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            this.errorCode = _data["errorCode"];
            this.description = _data["description"];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new ControllerActionResultError();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["errorCode"] = this.errorCode;
        data["description"] = this.description;
        return data;
    }
}
/** Unites States's state */
export class ApiStateModel {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            this.abbreviation = _data["abbreviation"];
            this.name = _data["name"];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new ApiStateModel();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["abbreviation"] = this.abbreviation;
        data["name"] = this.name;
        return data;
    }
}
export class ApiStateModelListControllerActionResult {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            if (Array.isArray(_data["errors"])) {
                this.errors = [];
                for (let item of _data["errors"])
                    this.errors.push(ControllerActionResultError.fromJS(item));
            }
            if (Array.isArray(_data["payload"])) {
                this.payload = [];
                for (let item of _data["payload"])
                    this.payload.push(ApiStateModel.fromJS(item));
            }
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new ApiStateModelListControllerActionResult();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.errors)) {
            data["errors"] = [];
            for (let item of this.errors)
                data["errors"].push(item.toJSON());
        }
        if (Array.isArray(this.payload)) {
            data["payload"] = [];
            for (let item of this.payload)
                data["payload"].push(item.toJSON());
        }
        return data;
    }
}
/** CPTCode record */
export class ApiCPTCodeModel {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            this.id = _data["id"];
            this.code = _data["code"];
            this.name = _data["name"];
            this.number = _data["number"];
            this.units = _data["units"];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new ApiCPTCodeModel();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["code"] = this.code;
        data["name"] = this.name;
        data["number"] = this.number;
        data["units"] = this.units;
        return data;
    }
}
export class ApiCPTCodeModelControllerActionResult {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            if (Array.isArray(_data["errors"])) {
                this.errors = [];
                for (let item of _data["errors"])
                    this.errors.push(ControllerActionResultError.fromJS(item));
            }
            this.payload = _data["payload"] ? ApiCPTCodeModel.fromJS(_data["payload"]) : undefined;
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new ApiCPTCodeModelControllerActionResult();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.errors)) {
            data["errors"] = [];
            for (let item of this.errors)
                data["errors"].push(item.toJSON());
        }
        data["payload"] = this.payload ? this.payload.toJSON() : undefined;
        return data;
    }
}
/** MemberMedicalConditionHistory record */
export class ApiMemberMedicalConditionHistoryModel {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            this.id = _data["id"];
            this.diagnosis = _data["diagnosis"];
            this.memberRecordGuid = _data["memberRecordGuid"];
            this.name = _data["name"];
            this.onsetDate = _data["onsetDate"];
            this.providerName = _data["providerName"];
            this.recoveryDate = _data["recoveryDate"];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new ApiMemberMedicalConditionHistoryModel();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["diagnosis"] = this.diagnosis;
        data["memberRecordGuid"] = this.memberRecordGuid;
        data["name"] = this.name;
        data["onsetDate"] = this.onsetDate;
        data["providerName"] = this.providerName;
        data["recoveryDate"] = this.recoveryDate;
        return data;
    }
}
export class ApiMemberMedicalConditionHistoryModelControllerActionResult {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            if (Array.isArray(_data["errors"])) {
                this.errors = [];
                for (let item of _data["errors"])
                    this.errors.push(ControllerActionResultError.fromJS(item));
            }
            this.payload = _data["payload"] ? ApiMemberMedicalConditionHistoryModel.fromJS(_data["payload"]) : undefined;
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new ApiMemberMedicalConditionHistoryModelControllerActionResult();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.errors)) {
            data["errors"] = [];
            for (let item of this.errors)
                data["errors"].push(item.toJSON());
        }
        data["payload"] = this.payload ? this.payload.toJSON() : undefined;
        return data;
    }
}
export class GuidControllerActionResult {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            if (Array.isArray(_data["errors"])) {
                this.errors = [];
                for (let item of _data["errors"])
                    this.errors.push(ControllerActionResultError.fromJS(item));
            }
            this.payload = _data["payload"];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new GuidControllerActionResult();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.errors)) {
            data["errors"] = [];
            for (let item of this.errors)
                data["errors"].push(item.toJSON());
        }
        data["payload"] = this.payload;
        return data;
    }
}
export class BooleanControllerActionResult {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            if (Array.isArray(_data["errors"])) {
                this.errors = [];
                for (let item of _data["errors"])
                    this.errors.push(ControllerActionResultError.fromJS(item));
            }
            this.payload = _data["payload"];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new BooleanControllerActionResult();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.errors)) {
            data["errors"] = [];
            for (let item of this.errors)
                data["errors"].push(item.toJSON());
        }
        data["payload"] = this.payload;
        return data;
    }
}
/** GroupPlan record */
export class ApiGroupPlanModel {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            this.id = _data["id"];
            this.coInsurance = _data["coInsurance"];
            this.copay = _data["copay"];
            this.groupRecordGuid = _data["groupRecordGuid"];
            this.maxFamilyDeductibleIn = _data["maxFamilyDeductibleIn"];
            this.maxFamilyDeductibleOut = _data["maxFamilyDeductibleOut"];
            this.maxFamilyOutOfPocketIn = _data["maxFamilyOutOfPocketIn"];
            this.maxFamilyOutOfPocketOut = _data["maxFamilyOutOfPocketOut"];
            this.maxIndividualDeductibleIn = _data["maxIndividualDeductibleIn"];
            this.maxIndividualDeductibleOut = _data["maxIndividualDeductibleOut"];
            this.maxIndividualOutOfPocketIn = _data["maxIndividualOutOfPocketIn"];
            this.maxIndividualOutOfPocketOut = _data["maxIndividualOutOfPocketOut"];
            this.planCode = _data["planCode"];
            this.planType = _data["planType"];
            this.rxBINNumber = _data["rxBINNumber"];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new ApiGroupPlanModel();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["coInsurance"] = this.coInsurance;
        data["copay"] = this.copay;
        data["groupRecordGuid"] = this.groupRecordGuid;
        data["maxFamilyDeductibleIn"] = this.maxFamilyDeductibleIn;
        data["maxFamilyDeductibleOut"] = this.maxFamilyDeductibleOut;
        data["maxFamilyOutOfPocketIn"] = this.maxFamilyOutOfPocketIn;
        data["maxFamilyOutOfPocketOut"] = this.maxFamilyOutOfPocketOut;
        data["maxIndividualDeductibleIn"] = this.maxIndividualDeductibleIn;
        data["maxIndividualDeductibleOut"] = this.maxIndividualDeductibleOut;
        data["maxIndividualOutOfPocketIn"] = this.maxIndividualOutOfPocketIn;
        data["maxIndividualOutOfPocketOut"] = this.maxIndividualOutOfPocketOut;
        data["planCode"] = this.planCode;
        data["planType"] = this.planType;
        data["rxBINNumber"] = this.rxBINNumber;
        return data;
    }
}
export class ApiGroupPlanModelControllerActionResult {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            if (Array.isArray(_data["errors"])) {
                this.errors = [];
                for (let item of _data["errors"])
                    this.errors.push(ControllerActionResultError.fromJS(item));
            }
            this.payload = _data["payload"] ? ApiGroupPlanModel.fromJS(_data["payload"]) : undefined;
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new ApiGroupPlanModelControllerActionResult();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.errors)) {
            data["errors"] = [];
            for (let item of this.errors)
                data["errors"].push(item.toJSON());
        }
        data["payload"] = this.payload ? this.payload.toJSON() : undefined;
        return data;
    }
}
/** ICD10Code record */
export class ApiICD10CodeModel {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            this.id = _data["id"];
            this.code = _data["code"];
            this.description = _data["description"];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new ApiICD10CodeModel();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["code"] = this.code;
        data["description"] = this.description;
        return data;
    }
}
export class ApiICD10CodeModelControllerActionResult {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            if (Array.isArray(_data["errors"])) {
                this.errors = [];
                for (let item of _data["errors"])
                    this.errors.push(ControllerActionResultError.fromJS(item));
            }
            this.payload = _data["payload"] ? ApiICD10CodeModel.fromJS(_data["payload"]) : undefined;
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new ApiICD10CodeModelControllerActionResult();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.errors)) {
            data["errors"] = [];
            for (let item of this.errors)
                data["errors"].push(item.toJSON());
        }
        data["payload"] = this.payload ? this.payload.toJSON() : undefined;
        return data;
    }
}
export class ApiICD10CodeModelListControllerActionResult {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            if (Array.isArray(_data["errors"])) {
                this.errors = [];
                for (let item of _data["errors"])
                    this.errors.push(ControllerActionResultError.fromJS(item));
            }
            if (Array.isArray(_data["payload"])) {
                this.payload = [];
                for (let item of _data["payload"])
                    this.payload.push(ApiICD10CodeModel.fromJS(item));
            }
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new ApiICD10CodeModelListControllerActionResult();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.errors)) {
            data["errors"] = [];
            for (let item of this.errors)
                data["errors"].push(item.toJSON());
        }
        if (Array.isArray(this.payload)) {
            data["payload"] = [];
            for (let item of this.payload)
                data["payload"].push(item.toJSON());
        }
        return data;
    }
}
/** MedicalClaim record */
export class ApiMedicalClaimModel {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            this.claimNumber = _data["claimNumber"];
            this.patientAge = _data["patientAge"];
            this.memberDateOfBirth = _data["memberDateOfBirth"] ? new Date(_data["memberDateOfBirth"].toString()) : undefined;
            this.memberFullName = _data["memberFullName"];
            this.memberRecordGuid = _data["memberRecordGuid"];
            this.serviceStartDate = _data["serviceStartDate"] ? new Date(_data["serviceStartDate"].toString()) : undefined;
            this.totalAmountAllowed = _data["totalAmountAllowed"];
            this.totalAmountCopay = _data["totalAmountCopay"];
            this.totalAmountDeductible = _data["totalAmountDeductible"];
            this.totalBilledAmount = _data["totalBilledAmount"];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new ApiMedicalClaimModel();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["claimNumber"] = this.claimNumber;
        data["patientAge"] = this.patientAge;
        data["memberDateOfBirth"] = this.memberDateOfBirth ? this.memberDateOfBirth.toISOString() : undefined;
        data["memberFullName"] = this.memberFullName;
        data["memberRecordGuid"] = this.memberRecordGuid;
        data["serviceStartDate"] = this.serviceStartDate ? this.serviceStartDate.toISOString() : undefined;
        data["totalAmountAllowed"] = this.totalAmountAllowed;
        data["totalAmountCopay"] = this.totalAmountCopay;
        data["totalAmountDeductible"] = this.totalAmountDeductible;
        data["totalBilledAmount"] = this.totalBilledAmount;
        return data;
    }
}
export class ApiMedicalClaimModelControllerActionResult {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            if (Array.isArray(_data["errors"])) {
                this.errors = [];
                for (let item of _data["errors"])
                    this.errors.push(ControllerActionResultError.fromJS(item));
            }
            this.payload = _data["payload"] ? ApiMedicalClaimModel.fromJS(_data["payload"]) : undefined;
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new ApiMedicalClaimModelControllerActionResult();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.errors)) {
            data["errors"] = [];
            for (let item of this.errors)
                data["errors"].push(item.toJSON());
        }
        data["payload"] = this.payload ? this.payload.toJSON() : undefined;
        return data;
    }
}
/** MemberMedicalDocument record */
export class ApiMedicalDocumentModel {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.createdByName = _data["createdByName"];
            this.allowFacilityAccess = _data["allowFacilityAccess"];
            this.allowMemberAccess = _data["allowMemberAccess"];
            this.fileExtension = _data["fileExtension"];
            this.lastUpdatedByName = _data["lastUpdatedByName"];
            this.lastUpdatedDate = _data["lastUpdatedDate"];
            this.createdDate = _data["createdDate"];
            this.caseRecordGuid = _data["caseRecordGuid"];
            this.description = _data["description"];
            this.documentRawHTMLContent = _data["documentRawHTMLContent"];
            this.documentRecordGuid = _data["documentRecordGuid"];
            this.memberRecordGuid = _data["memberRecordGuid"];
            this.referenceNumber = _data["referenceNumber"];
            this.documentTemplateID = _data["documentTemplateID"];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new ApiMedicalDocumentModel();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["createdByName"] = this.createdByName;
        data["allowFacilityAccess"] = this.allowFacilityAccess;
        data["allowMemberAccess"] = this.allowMemberAccess;
        data["fileExtension"] = this.fileExtension;
        data["lastUpdatedByName"] = this.lastUpdatedByName;
        data["lastUpdatedDate"] = this.lastUpdatedDate;
        data["createdDate"] = this.createdDate;
        data["caseRecordGuid"] = this.caseRecordGuid;
        data["description"] = this.description;
        data["documentRawHTMLContent"] = this.documentRawHTMLContent;
        data["documentRecordGuid"] = this.documentRecordGuid;
        data["memberRecordGuid"] = this.memberRecordGuid;
        data["referenceNumber"] = this.referenceNumber;
        data["documentTemplateID"] = this.documentTemplateID;
        return data;
    }
}
export class ApiMedicalDocumentModelControllerActionResult {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            if (Array.isArray(_data["errors"])) {
                this.errors = [];
                for (let item of _data["errors"])
                    this.errors.push(ControllerActionResultError.fromJS(item));
            }
            this.payload = _data["payload"] ? ApiMedicalDocumentModel.fromJS(_data["payload"]) : undefined;
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new ApiMedicalDocumentModelControllerActionResult();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.errors)) {
            data["errors"] = [];
            for (let item of this.errors)
                data["errors"].push(item.toJSON());
        }
        data["payload"] = this.payload ? this.payload.toJSON() : undefined;
        return data;
    }
}
/** Document email model */
export class ApiMedicalDocumentEmailModel {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            this.emailAddress = _data["emailAddress"];
            this.title = _data["title"];
            this.emailBody = _data["emailBody"];
            this.userName = _data["userName"];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new ApiMedicalDocumentEmailModel();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["emailAddress"] = this.emailAddress;
        data["title"] = this.title;
        data["emailBody"] = this.emailBody;
        data["userName"] = this.userName;
        return data;
    }
}
/** Model used to specify medical document visibility */
export class ApiMedicalDocumentVisibilityModel {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            this.scope = _data["scope"];
            this.isVisible = _data["isVisible"];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new ApiMedicalDocumentVisibilityModel();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["scope"] = this.scope;
        data["isVisible"] = this.isVisible;
        return data;
    }
}
/** MedicalDocumentHistory record */
export class ApiMedicalDocumentHistoryModel {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            this.id = _data["id"];
            this.createdByName = _data["createdByName"];
            this.createdDate = _data["createdDate"];
            this.description = _data["description"];
            this.medicalDocumentRecordGuid = _data["medicalDocumentRecordGuid"];
            this.name = _data["name"];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new ApiMedicalDocumentHistoryModel();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["createdByName"] = this.createdByName;
        data["createdDate"] = this.createdDate;
        data["description"] = this.description;
        data["medicalDocumentRecordGuid"] = this.medicalDocumentRecordGuid;
        data["name"] = this.name;
        return data;
    }
}
export class ApiMedicalDocumentHistoryModelListControllerActionResult {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            if (Array.isArray(_data["errors"])) {
                this.errors = [];
                for (let item of _data["errors"])
                    this.errors.push(ControllerActionResultError.fromJS(item));
            }
            if (Array.isArray(_data["payload"])) {
                this.payload = [];
                for (let item of _data["payload"])
                    this.payload.push(ApiMedicalDocumentHistoryModel.fromJS(item));
            }
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new ApiMedicalDocumentHistoryModelListControllerActionResult();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.errors)) {
            data["errors"] = [];
            for (let item of this.errors)
                data["errors"].push(item.toJSON());
        }
        if (Array.isArray(this.payload)) {
            data["payload"] = [];
            for (let item of this.payload)
                data["payload"].push(item.toJSON());
        }
        return data;
    }
}
export class MedicalDocumentBytesApiModel {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.description = _data["description"];
            this.extension = _data["extension"];
            this.html = _data["html"];
            this.base64Content = _data["base64Content"];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new MedicalDocumentBytesApiModel();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["description"] = this.description;
        data["extension"] = this.extension;
        data["html"] = this.html;
        data["base64Content"] = this.base64Content;
        return data;
    }
}
export class MedicalDocumentBytesApiModelControllerActionResult {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            if (Array.isArray(_data["errors"])) {
                this.errors = [];
                for (let item of _data["errors"])
                    this.errors.push(ControllerActionResultError.fromJS(item));
            }
            this.payload = _data["payload"] ? MedicalDocumentBytesApiModel.fromJS(_data["payload"]) : undefined;
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new MedicalDocumentBytesApiModelControllerActionResult();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.errors)) {
            data["errors"] = [];
            for (let item of this.errors)
                data["errors"].push(item.toJSON());
        }
        data["payload"] = this.payload ? this.payload.toJSON() : undefined;
        return data;
    }
}
export class ApiMedicalDocumentHistoryModelControllerActionResult {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            if (Array.isArray(_data["errors"])) {
                this.errors = [];
                for (let item of _data["errors"])
                    this.errors.push(ControllerActionResultError.fromJS(item));
            }
            this.payload = _data["payload"] ? ApiMedicalDocumentHistoryModel.fromJS(_data["payload"]) : undefined;
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new ApiMedicalDocumentHistoryModelControllerActionResult();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.errors)) {
            data["errors"] = [];
            for (let item of this.errors)
                data["errors"].push(item.toJSON());
        }
        data["payload"] = this.payload ? this.payload.toJSON() : undefined;
        return data;
    }
}
/** MedicalDocumentTemplate record */
export class ApiMedicalDocumentTemplateModel {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            this.id = _data["id"];
            this.description = _data["description"];
            this.htmlTemplate = _data["htmlTemplate"];
            this.name = _data["name"];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new ApiMedicalDocumentTemplateModel();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["description"] = this.description;
        data["htmlTemplate"] = this.htmlTemplate;
        data["name"] = this.name;
        return data;
    }
}
export class ApiMedicalDocumentTemplateModelListControllerActionResult {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            if (Array.isArray(_data["errors"])) {
                this.errors = [];
                for (let item of _data["errors"])
                    this.errors.push(ControllerActionResultError.fromJS(item));
            }
            if (Array.isArray(_data["payload"])) {
                this.payload = [];
                for (let item of _data["payload"])
                    this.payload.push(ApiMedicalDocumentTemplateModel.fromJS(item));
            }
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new ApiMedicalDocumentTemplateModelListControllerActionResult();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.errors)) {
            data["errors"] = [];
            for (let item of this.errors)
                data["errors"].push(item.toJSON());
        }
        if (Array.isArray(this.payload)) {
            data["payload"] = [];
            for (let item of this.payload)
                data["payload"].push(item.toJSON());
        }
        return data;
    }
}
export class ApiMedicalDocumentTemplateModelControllerActionResult {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            if (Array.isArray(_data["errors"])) {
                this.errors = [];
                for (let item of _data["errors"])
                    this.errors.push(ControllerActionResultError.fromJS(item));
            }
            this.payload = _data["payload"] ? ApiMedicalDocumentTemplateModel.fromJS(_data["payload"]) : undefined;
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new ApiMedicalDocumentTemplateModelControllerActionResult();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.errors)) {
            data["errors"] = [];
            for (let item of this.errors)
                data["errors"].push(item.toJSON());
        }
        data["payload"] = this.payload ? this.payload.toJSON() : undefined;
        return data;
    }
}
export class StringControllerActionResult {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            if (Array.isArray(_data["errors"])) {
                this.errors = [];
                for (let item of _data["errors"])
                    this.errors.push(ControllerActionResultError.fromJS(item));
            }
            this.payload = _data["payload"];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new StringControllerActionResult();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.errors)) {
            data["errors"] = [];
            for (let item of this.errors)
                data["errors"].push(item.toJSON());
        }
        data["payload"] = this.payload;
        return data;
    }
}
/** MedicalFacility record */
export class ApiMedicalFacilityModel {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.addressLine1 = _data["addressLine1"];
            this.addressLine2 = _data["addressLine2"];
            this.city = _data["city"];
            this.country = _data["country"];
            this.emailAddress = _data["emailAddress"];
            this.faxNumber = _data["faxNumber"];
            this.npiNumber = _data["npiNumber"];
            this.tinNumber = _data["tinNumber"];
            this.phoneNumber = _data["phoneNumber"];
            this.state = _data["state"];
            this.taxID = _data["taxID"];
            this.zipCode = _data["zipCode"];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new ApiMedicalFacilityModel();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["addressLine1"] = this.addressLine1;
        data["addressLine2"] = this.addressLine2;
        data["city"] = this.city;
        data["country"] = this.country;
        data["emailAddress"] = this.emailAddress;
        data["faxNumber"] = this.faxNumber;
        data["npiNumber"] = this.npiNumber;
        data["tinNumber"] = this.tinNumber;
        data["phoneNumber"] = this.phoneNumber;
        data["state"] = this.state;
        data["taxID"] = this.taxID;
        data["zipCode"] = this.zipCode;
        return data;
    }
}
export class ApiMedicalFacilityModelListControllerActionResult {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            if (Array.isArray(_data["errors"])) {
                this.errors = [];
                for (let item of _data["errors"])
                    this.errors.push(ControllerActionResultError.fromJS(item));
            }
            if (Array.isArray(_data["payload"])) {
                this.payload = [];
                for (let item of _data["payload"])
                    this.payload.push(ApiMedicalFacilityModel.fromJS(item));
            }
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new ApiMedicalFacilityModelListControllerActionResult();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.errors)) {
            data["errors"] = [];
            for (let item of this.errors)
                data["errors"].push(item.toJSON());
        }
        if (Array.isArray(this.payload)) {
            data["payload"] = [];
            for (let item of this.payload)
                data["payload"].push(item.toJSON());
        }
        return data;
    }
}
/** A pre-auth model */
export class PreAuthorizationAPIModel {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            this.preAuthorizationNumber = _data["preAuthorizationNumber"];
            this.status = _data["status"];
            this.stage = _data["stage"];
            this.recordGuid = _data["recordGuid"];
            this.memberFullName = _data["memberFullName"];
            this.memberDateOfBirth = _data["memberDateOfBirth"];
            this.memberGender = _data["memberGender"];
            this.description = _data["description"];
            this.expectedServiceDate = _data["expectedServiceDate"];
            this.expectedServiceEnd = _data["expectedServiceEnd"];
            this.memberRecordGuid = _data["memberRecordGuid"];
            this.requestingProvidergGuid = _data["requestingProvidergGuid"];
            this.servicingProviderGuid = _data["servicingProviderGuid"];
            this.requestingFacilityGuid = _data["requestingFacilityGuid"];
            this.servicingFacilityGuid = _data["servicingFacilityGuid"];
            this.approvalPeridodStartDate = _data["approvalPeridodStartDate"];
            this.approvalPeridodEndDate = _data["approvalPeridodEndDate"];
            this.requestingProviderName = _data["requestingProviderName"];
            this.requestingFacilityName = _data["requestingFacilityName"];
            this.servicingProviderName = _data["servicingProviderName"];
            this.servicingFacilityName = _data["servicingFacilityName"];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new PreAuthorizationAPIModel();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["preAuthorizationNumber"] = this.preAuthorizationNumber;
        data["status"] = this.status;
        data["stage"] = this.stage;
        data["recordGuid"] = this.recordGuid;
        data["memberFullName"] = this.memberFullName;
        data["memberDateOfBirth"] = this.memberDateOfBirth;
        data["memberGender"] = this.memberGender;
        data["description"] = this.description;
        data["expectedServiceDate"] = this.expectedServiceDate;
        data["expectedServiceEnd"] = this.expectedServiceEnd;
        data["memberRecordGuid"] = this.memberRecordGuid;
        data["requestingProvidergGuid"] = this.requestingProvidergGuid;
        data["servicingProviderGuid"] = this.servicingProviderGuid;
        data["requestingFacilityGuid"] = this.requestingFacilityGuid;
        data["servicingFacilityGuid"] = this.servicingFacilityGuid;
        data["approvalPeridodStartDate"] = this.approvalPeridodStartDate;
        data["approvalPeridodEndDate"] = this.approvalPeridodEndDate;
        data["requestingProviderName"] = this.requestingProviderName;
        data["requestingFacilityName"] = this.requestingFacilityName;
        data["servicingProviderName"] = this.servicingProviderName;
        data["servicingFacilityName"] = this.servicingFacilityName;
        return data;
    }
}
export class PreAuthorizationAPIModelListControllerActionResult {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            if (Array.isArray(_data["errors"])) {
                this.errors = [];
                for (let item of _data["errors"])
                    this.errors.push(ControllerActionResultError.fromJS(item));
            }
            if (Array.isArray(_data["payload"])) {
                this.payload = [];
                for (let item of _data["payload"])
                    this.payload.push(PreAuthorizationAPIModel.fromJS(item));
            }
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new PreAuthorizationAPIModelListControllerActionResult();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.errors)) {
            data["errors"] = [];
            for (let item of this.errors)
                data["errors"].push(item.toJSON());
        }
        if (Array.isArray(this.payload)) {
            data["payload"] = [];
            for (let item of this.payload)
                data["payload"].push(item.toJSON());
        }
        return data;
    }
}
export class PreAuthorizationAPIModelControllerActionResult {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            if (Array.isArray(_data["errors"])) {
                this.errors = [];
                for (let item of _data["errors"])
                    this.errors.push(ControllerActionResultError.fromJS(item));
            }
            this.payload = _data["payload"] ? PreAuthorizationAPIModel.fromJS(_data["payload"]) : undefined;
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new PreAuthorizationAPIModelControllerActionResult();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.errors)) {
            data["errors"] = [];
            for (let item of this.errors)
                data["errors"].push(item.toJSON());
        }
        data["payload"] = this.payload ? this.payload.toJSON() : undefined;
        return data;
    }
}
export class ApiMedicalDocumentModelListControllerActionResult {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            if (Array.isArray(_data["errors"])) {
                this.errors = [];
                for (let item of _data["errors"])
                    this.errors.push(ControllerActionResultError.fromJS(item));
            }
            if (Array.isArray(_data["payload"])) {
                this.payload = [];
                for (let item of _data["payload"])
                    this.payload.push(ApiMedicalDocumentModel.fromJS(item));
            }
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new ApiMedicalDocumentModelListControllerActionResult();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.errors)) {
            data["errors"] = [];
            for (let item of this.errors)
                data["errors"].push(item.toJSON());
        }
        if (Array.isArray(this.payload)) {
            data["payload"] = [];
            for (let item of this.payload)
                data["payload"].push(item.toJSON());
        }
        return data;
    }
}
/** Reresents a pre-auth documewnt */
export class ApiNewPreAuthDocumentModel {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            this.name = _data["name"];
            this.userName = _data["userName"];
            this.base64Content = _data["base64Content"];
            this.fileExtension = _data["fileExtension"];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new ApiNewPreAuthDocumentModel();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["userName"] = this.userName;
        data["base64Content"] = this.base64Content;
        data["fileExtension"] = this.fileExtension;
        return data;
    }
}
/** Defines a new medical procedure */
export class ApiPreAuthProcedureModel {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.number = _data["number"];
            this.units = _data["units"];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new ApiPreAuthProcedureModel();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["number"] = this.number;
        data["units"] = this.units;
        return data;
    }
}
export class ApiPreAuthProcedureModelListControllerActionResult {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            if (Array.isArray(_data["errors"])) {
                this.errors = [];
                for (let item of _data["errors"])
                    this.errors.push(ControllerActionResultError.fromJS(item));
            }
            if (Array.isArray(_data["payload"])) {
                this.payload = [];
                for (let item of _data["payload"])
                    this.payload.push(ApiPreAuthProcedureModel.fromJS(item));
            }
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new ApiPreAuthProcedureModelListControllerActionResult();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.errors)) {
            data["errors"] = [];
            for (let item of this.errors)
                data["errors"].push(item.toJSON());
        }
        if (Array.isArray(this.payload)) {
            data["payload"] = [];
            for (let item of this.payload)
                data["payload"].push(item.toJSON());
        }
        return data;
    }
}
export class ApiPreAuthServiceModel {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.type = _data["type"];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new ApiPreAuthServiceModel();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["type"] = this.type;
        return data;
    }
}
export class ApiPreAuthServiceModelListControllerActionResult {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            if (Array.isArray(_data["errors"])) {
                this.errors = [];
                for (let item of _data["errors"])
                    this.errors.push(ControllerActionResultError.fromJS(item));
            }
            if (Array.isArray(_data["payload"])) {
                this.payload = [];
                for (let item of _data["payload"])
                    this.payload.push(ApiPreAuthServiceModel.fromJS(item));
            }
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new ApiPreAuthServiceModelListControllerActionResult();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.errors)) {
            data["errors"] = [];
            for (let item of this.errors)
                data["errors"].push(item.toJSON());
        }
        if (Array.isArray(this.payload)) {
            data["payload"] = [];
            for (let item of this.payload)
                data["payload"].push(item.toJSON());
        }
        return data;
    }
}
/** Note model */
export class ApiMedicalNoteModel {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            this.id = _data["id"];
            this.title = _data["title"];
            this.content = _data["content"];
            this.createdByUser = _data["createdByUser"];
            this.createdDate = _data["createdDate"] ? new Date(_data["createdDate"].toString()) : undefined;
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new ApiMedicalNoteModel();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["title"] = this.title;
        data["content"] = this.content;
        data["createdByUser"] = this.createdByUser;
        data["createdDate"] = this.createdDate ? this.createdDate.toISOString() : undefined;
        return data;
    }
}
export class ApiMedicalNoteModelListControllerActionResult {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            if (Array.isArray(_data["errors"])) {
                this.errors = [];
                for (let item of _data["errors"])
                    this.errors.push(ControllerActionResultError.fromJS(item));
            }
            if (Array.isArray(_data["payload"])) {
                this.payload = [];
                for (let item of _data["payload"])
                    this.payload.push(ApiMedicalNoteModel.fromJS(item));
            }
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new ApiMedicalNoteModelListControllerActionResult();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.errors)) {
            data["errors"] = [];
            for (let item of this.errors)
                data["errors"].push(item.toJSON());
        }
        if (Array.isArray(this.payload)) {
            data["payload"] = [];
            for (let item of this.payload)
                data["payload"].push(item.toJSON());
        }
        return data;
    }
}
/** ApiNoteModel record */
export class ApiNewNoteModel {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            this.message = _data["message"];
            this.createdByUserName = _data["createdByUserName"];
            this.title = _data["title"];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new ApiNewNoteModel();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["message"] = this.message;
        data["createdByUserName"] = this.createdByUserName;
        data["title"] = this.title;
        return data;
    }
}
export class ApiMedicalFacilityModelControllerActionResult {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            if (Array.isArray(_data["errors"])) {
                this.errors = [];
                for (let item of _data["errors"])
                    this.errors.push(ControllerActionResultError.fromJS(item));
            }
            this.payload = _data["payload"] ? ApiMedicalFacilityModel.fromJS(_data["payload"]) : undefined;
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new ApiMedicalFacilityModelControllerActionResult();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.errors)) {
            data["errors"] = [];
            for (let item of this.errors)
                data["errors"].push(item.toJSON());
        }
        data["payload"] = this.payload ? this.payload.toJSON() : undefined;
        return data;
    }
}
/** MedicalNetwork record */
export class ApiMedicalNetworkModel {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            this.id = _data["id"];
            this.accountNumber = _data["accountNumber"];
            this.addressLine1 = _data["addressLine1"];
            this.addressLine2 = _data["addressLine2"];
            this.city = _data["city"];
            this.contactName = _data["contactName"];
            this.description = _data["description"];
            this.emailAddress = _data["emailAddress"];
            this.faxNumber = _data["faxNumber"];
            this.mainPhoneNumber = _data["mainPhoneNumber"];
            this.name = _data["name"];
            this.postalCode = _data["postalCode"];
            this.state = _data["state"];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new ApiMedicalNetworkModel();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["accountNumber"] = this.accountNumber;
        data["addressLine1"] = this.addressLine1;
        data["addressLine2"] = this.addressLine2;
        data["city"] = this.city;
        data["contactName"] = this.contactName;
        data["description"] = this.description;
        data["emailAddress"] = this.emailAddress;
        data["faxNumber"] = this.faxNumber;
        data["mainPhoneNumber"] = this.mainPhoneNumber;
        data["name"] = this.name;
        data["postalCode"] = this.postalCode;
        data["state"] = this.state;
        return data;
    }
}
export class ApiMedicalNetworkModelListControllerActionResult {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            if (Array.isArray(_data["errors"])) {
                this.errors = [];
                for (let item of _data["errors"])
                    this.errors.push(ControllerActionResultError.fromJS(item));
            }
            if (Array.isArray(_data["payload"])) {
                this.payload = [];
                for (let item of _data["payload"])
                    this.payload.push(ApiMedicalNetworkModel.fromJS(item));
            }
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new ApiMedicalNetworkModelListControllerActionResult();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.errors)) {
            data["errors"] = [];
            for (let item of this.errors)
                data["errors"].push(item.toJSON());
        }
        if (Array.isArray(this.payload)) {
            data["payload"] = [];
            for (let item of this.payload)
                data["payload"].push(item.toJSON());
        }
        return data;
    }
}
export class ApiMedicalNetworkModelControllerActionResult {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            if (Array.isArray(_data["errors"])) {
                this.errors = [];
                for (let item of _data["errors"])
                    this.errors.push(ControllerActionResultError.fromJS(item));
            }
            this.payload = _data["payload"] ? ApiMedicalNetworkModel.fromJS(_data["payload"]) : undefined;
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new ApiMedicalNetworkModelControllerActionResult();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.errors)) {
            data["errors"] = [];
            for (let item of this.errors)
                data["errors"].push(item.toJSON());
        }
        data["payload"] = this.payload ? this.payload.toJSON() : undefined;
        return data;
    }
}
/** MedicalNetworkUser record */
export class ApiMedicalNetworkUserModel {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            this.id = _data["id"];
            this.emailAddress = _data["emailAddress"];
            this.firstName = _data["firstName"];
            this.lastName = _data["lastName"];
            this.userId = _data["userId"];
            this.networkRecordGuid = _data["networkRecordGuid"];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new ApiMedicalNetworkUserModel();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["emailAddress"] = this.emailAddress;
        data["firstName"] = this.firstName;
        data["lastName"] = this.lastName;
        data["userId"] = this.userId;
        data["networkRecordGuid"] = this.networkRecordGuid;
        return data;
    }
}
export class ApiMedicalNetworkUserModelListControllerActionResult {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            if (Array.isArray(_data["errors"])) {
                this.errors = [];
                for (let item of _data["errors"])
                    this.errors.push(ControllerActionResultError.fromJS(item));
            }
            if (Array.isArray(_data["payload"])) {
                this.payload = [];
                for (let item of _data["payload"])
                    this.payload.push(ApiMedicalNetworkUserModel.fromJS(item));
            }
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new ApiMedicalNetworkUserModelListControllerActionResult();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.errors)) {
            data["errors"] = [];
            for (let item of this.errors)
                data["errors"].push(item.toJSON());
        }
        if (Array.isArray(this.payload)) {
            data["payload"] = [];
            for (let item of this.payload)
                data["payload"].push(item.toJSON());
        }
        return data;
    }
}
/** MedicalProvider record */
export class ApiMedicalProviderModel {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            this.id = _data["id"];
            this.addressLine1 = _data["addressLine1"];
            this.addressLine2 = _data["addressLine2"];
            this.city = _data["city"];
            this.country = _data["country"];
            this.emailAddress = _data["emailAddress"];
            this.firstName = _data["firstName"];
            this.ipaName = _data["ipaName"];
            this.lastName = _data["lastName"];
            this.medicalGroupName = _data["medicalGroupName"];
            this.mobileNumber = _data["mobileNumber"];
            this.npi = _data["npi"];
            this.specialties = _data["specialties"];
            this.state = _data["state"];
            this.subSpecialties = _data["subSpecialties"];
            this.tin = _data["tin"];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new ApiMedicalProviderModel();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["addressLine1"] = this.addressLine1;
        data["addressLine2"] = this.addressLine2;
        data["city"] = this.city;
        data["country"] = this.country;
        data["emailAddress"] = this.emailAddress;
        data["firstName"] = this.firstName;
        data["ipaName"] = this.ipaName;
        data["lastName"] = this.lastName;
        data["medicalGroupName"] = this.medicalGroupName;
        data["mobileNumber"] = this.mobileNumber;
        data["npi"] = this.npi;
        data["specialties"] = this.specialties;
        data["state"] = this.state;
        data["subSpecialties"] = this.subSpecialties;
        data["tin"] = this.tin;
        return data;
    }
}
export class ApiMedicalProviderModelListControllerActionResult {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            if (Array.isArray(_data["errors"])) {
                this.errors = [];
                for (let item of _data["errors"])
                    this.errors.push(ControllerActionResultError.fromJS(item));
            }
            if (Array.isArray(_data["payload"])) {
                this.payload = [];
                for (let item of _data["payload"])
                    this.payload.push(ApiMedicalProviderModel.fromJS(item));
            }
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new ApiMedicalProviderModelListControllerActionResult();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.errors)) {
            data["errors"] = [];
            for (let item of this.errors)
                data["errors"].push(item.toJSON());
        }
        if (Array.isArray(this.payload)) {
            data["payload"] = [];
            for (let item of this.payload)
                data["payload"].push(item.toJSON());
        }
        return data;
    }
}
export class ApiUserFacilityAssociationModel {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            this.role = _data["role"];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new ApiUserFacilityAssociationModel();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["role"] = this.role;
        return data;
    }
}
export class ApiUserNetworkAssociationModel {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            this.role = _data["role"];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new ApiUserNetworkAssociationModel();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["role"] = this.role;
        return data;
    }
}
/** MedicalPlanDetail record */
export class ApiMedicalPlanDetailModel {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.value = _data["value"];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new ApiMedicalPlanDetailModel();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["value"] = this.value;
        return data;
    }
}
export class ApiMedicalPlanDetailModelListControllerActionResult {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            if (Array.isArray(_data["errors"])) {
                this.errors = [];
                for (let item of _data["errors"])
                    this.errors.push(ControllerActionResultError.fromJS(item));
            }
            if (Array.isArray(_data["payload"])) {
                this.payload = [];
                for (let item of _data["payload"])
                    this.payload.push(ApiMedicalPlanDetailModel.fromJS(item));
            }
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new ApiMedicalPlanDetailModelListControllerActionResult();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.errors)) {
            data["errors"] = [];
            for (let item of this.errors)
                data["errors"].push(item.toJSON());
        }
        if (Array.isArray(this.payload)) {
            data["payload"] = [];
            for (let item of this.payload)
                data["payload"].push(item.toJSON());
        }
        return data;
    }
}
/** New provider registration model */
export class NewProviderAPIModel {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            this.facilityName = _data["facilityName"];
            this.facilityAddressLine1 = _data["facilityAddressLine1"];
            this.facilityAddressLine2 = _data["facilityAddressLine2"];
            this.facilityCity = _data["facilityCity"];
            this.facilityState = _data["facilityState"];
            this.facilityZipCode = _data["facilityZipCode"];
            this.contactName = _data["contactName"];
            this.name = _data["name"];
            this.firstName = _data["firstName"];
            this.lastName = _data["lastName"];
            this.npiNumber = _data["npiNumber"];
            this.tinNumber = _data["tinNumber"];
            this.emailAddress = _data["emailAddress"];
            this.addressLine1 = _data["addressLine1"];
            this.addressLine2 = _data["addressLine2"];
            this.city = _data["city"];
            this.state = _data["state"];
            this.zipCode = _data["zipCode"];
            this.phoneNumber = _data["phoneNumber"];
            this.faxNumber = _data["faxNumber"];
            if (Array.isArray(_data["specialties"])) {
                this.specialties = [];
                for (let item of _data["specialties"])
                    this.specialties.push(item);
            }
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new NewProviderAPIModel();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["facilityName"] = this.facilityName;
        data["facilityAddressLine1"] = this.facilityAddressLine1;
        data["facilityAddressLine2"] = this.facilityAddressLine2;
        data["facilityCity"] = this.facilityCity;
        data["facilityState"] = this.facilityState;
        data["facilityZipCode"] = this.facilityZipCode;
        data["contactName"] = this.contactName;
        data["name"] = this.name;
        data["firstName"] = this.firstName;
        data["lastName"] = this.lastName;
        data["npiNumber"] = this.npiNumber;
        data["tinNumber"] = this.tinNumber;
        data["emailAddress"] = this.emailAddress;
        data["addressLine1"] = this.addressLine1;
        data["addressLine2"] = this.addressLine2;
        data["city"] = this.city;
        data["state"] = this.state;
        data["zipCode"] = this.zipCode;
        data["phoneNumber"] = this.phoneNumber;
        data["faxNumber"] = this.faxNumber;
        if (Array.isArray(this.specialties)) {
            data["specialties"] = [];
            for (let item of this.specialties)
                data["specialties"].push(item);
        }
        return data;
    }
}
export class ProviderAPIModel {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            this.name = _data["name"];
            this.firstName = _data["firstName"];
            this.lastName = _data["lastName"];
            this.npiNumber = _data["npiNumber"];
            this.tinNumber = _data["tinNumber"];
            this.emailAddress = _data["emailAddress"];
            this.facilityName = _data["facilityName"];
            this.addressLine1 = _data["addressLine1"];
            this.addressLine2 = _data["addressLine2"];
            this.city = _data["city"];
            this.state = _data["state"];
            this.zipCode = _data["zipCode"];
            this.phoneNumber = _data["phoneNumber"];
            this.faxNumber = _data["faxNumber"];
            if (Array.isArray(_data["specialties"])) {
                this.specialties = [];
                for (let item of _data["specialties"])
                    this.specialties.push(item);
            }
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new ProviderAPIModel();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["firstName"] = this.firstName;
        data["lastName"] = this.lastName;
        data["npiNumber"] = this.npiNumber;
        data["tinNumber"] = this.tinNumber;
        data["emailAddress"] = this.emailAddress;
        data["facilityName"] = this.facilityName;
        data["addressLine1"] = this.addressLine1;
        data["addressLine2"] = this.addressLine2;
        data["city"] = this.city;
        data["state"] = this.state;
        data["zipCode"] = this.zipCode;
        data["phoneNumber"] = this.phoneNumber;
        data["faxNumber"] = this.faxNumber;
        if (Array.isArray(this.specialties)) {
            data["specialties"] = [];
            for (let item of this.specialties)
                data["specialties"].push(item);
        }
        return data;
    }
}
export class MedicalSpecialtyModel {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new MedicalSpecialtyModel();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        return data;
    }
}
export class MedicalSpecialtyModelListControllerActionResult {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            if (Array.isArray(_data["errors"])) {
                this.errors = [];
                for (let item of _data["errors"])
                    this.errors.push(ControllerActionResultError.fromJS(item));
            }
            if (Array.isArray(_data["payload"])) {
                this.payload = [];
                for (let item of _data["payload"])
                    this.payload.push(MedicalSpecialtyModel.fromJS(item));
            }
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new MedicalSpecialtyModelListControllerActionResult();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.errors)) {
            data["errors"] = [];
            for (let item of this.errors)
                data["errors"].push(item.toJSON());
        }
        if (Array.isArray(this.payload)) {
            data["payload"] = [];
            for (let item of this.payload)
                data["payload"].push(item.toJSON());
        }
        return data;
    }
}
export class SearchDoctorModel {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            this.id = _data["id"];
            this.firstName = _data["firstName"];
            this.lastName = _data["lastName"];
            this.npi = _data["npi"];
            this.tin = _data["tin"];
            this.specialty = _data["specialty"];
            this.facilityName = _data["facilityName"];
            this.facilityGuid = _data["facilityGuid"];
            this.subSpecialty = _data["subSpecialty"];
            this.addressLine1 = _data["addressLine1"];
            this.addressLine2 = _data["addressLine2"];
            this.city = _data["city"];
            this.state = _data["state"];
            this.zipCode = _data["zipCode"];
            this.mainOfficePhoneNumber = _data["mainOfficePhoneNumber"];
            this.serviceLocation = _data["serviceLocation"];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new SearchDoctorModel();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["firstName"] = this.firstName;
        data["lastName"] = this.lastName;
        data["npi"] = this.npi;
        data["tin"] = this.tin;
        data["specialty"] = this.specialty;
        data["facilityName"] = this.facilityName;
        data["facilityGuid"] = this.facilityGuid;
        data["subSpecialty"] = this.subSpecialty;
        data["addressLine1"] = this.addressLine1;
        data["addressLine2"] = this.addressLine2;
        data["city"] = this.city;
        data["state"] = this.state;
        data["zipCode"] = this.zipCode;
        data["mainOfficePhoneNumber"] = this.mainOfficePhoneNumber;
        data["serviceLocation"] = this.serviceLocation;
        return data;
    }
}
export class SearchDoctorModelListControllerActionResult {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            if (Array.isArray(_data["errors"])) {
                this.errors = [];
                for (let item of _data["errors"])
                    this.errors.push(ControllerActionResultError.fromJS(item));
            }
            if (Array.isArray(_data["payload"])) {
                this.payload = [];
                for (let item of _data["payload"])
                    this.payload.push(SearchDoctorModel.fromJS(item));
            }
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new SearchDoctorModelListControllerActionResult();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.errors)) {
            data["errors"] = [];
            for (let item of this.errors)
                data["errors"].push(item.toJSON());
        }
        if (Array.isArray(this.payload)) {
            data["payload"] = [];
            for (let item of this.payload)
                data["payload"].push(item.toJSON());
        }
        return data;
    }
}
export class ApiMedicalProviderAdvancedSearchModel {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            this.providerName = _data["providerName"];
            this.facilityName = _data["facilityName"];
            this.specialty = _data["specialty"];
            this.gender = _data["gender"];
            this.zipCode = _data["zipCode"];
            this.city = _data["city"];
            this.state = _data["state"];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new ApiMedicalProviderAdvancedSearchModel();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["providerName"] = this.providerName;
        data["facilityName"] = this.facilityName;
        data["specialty"] = this.specialty;
        data["gender"] = this.gender;
        data["zipCode"] = this.zipCode;
        data["city"] = this.city;
        data["state"] = this.state;
        return data;
    }
}
export class SearchDoctorModelControllerActionResult {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            if (Array.isArray(_data["errors"])) {
                this.errors = [];
                for (let item of _data["errors"])
                    this.errors.push(ControllerActionResultError.fromJS(item));
            }
            this.payload = _data["payload"] ? SearchDoctorModel.fromJS(_data["payload"]) : undefined;
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new SearchDoctorModelControllerActionResult();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.errors)) {
            data["errors"] = [];
            for (let item of this.errors)
                data["errors"].push(item.toJSON());
        }
        data["payload"] = this.payload ? this.payload.toJSON() : undefined;
        return data;
    }
}
/** MedicalService record */
export class ApiMedicalServiceModel {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            this.id = _data["id"];
            this.serviceName = _data["serviceName"];
            this.serviceTypeGuid = _data["serviceTypeGuid"];
            this.serviceTypeName = _data["serviceTypeName"];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new ApiMedicalServiceModel();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["serviceName"] = this.serviceName;
        data["serviceTypeGuid"] = this.serviceTypeGuid;
        data["serviceTypeName"] = this.serviceTypeName;
        return data;
    }
}
export class ApiMedicalServiceModelListControllerActionResult {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            if (Array.isArray(_data["errors"])) {
                this.errors = [];
                for (let item of _data["errors"])
                    this.errors.push(ControllerActionResultError.fromJS(item));
            }
            if (Array.isArray(_data["payload"])) {
                this.payload = [];
                for (let item of _data["payload"])
                    this.payload.push(ApiMedicalServiceModel.fromJS(item));
            }
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new ApiMedicalServiceModelListControllerActionResult();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.errors)) {
            data["errors"] = [];
            for (let item of this.errors)
                data["errors"].push(item.toJSON());
        }
        if (Array.isArray(this.payload)) {
            data["payload"] = [];
            for (let item of this.payload)
                data["payload"].push(item.toJSON());
        }
        return data;
    }
}
/** MemberMedicationHistory record */
export class ApiMemberMedicationHistoryModel {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            this.id = _data["id"];
            this.dosage = _data["dosage"];
            this.endDate = _data["endDate"];
            this.frequency = _data["frequency"];
            this.memberRecordGuid = _data["memberRecordGuid"];
            this.name = _data["name"];
            this.providerName = _data["providerName"];
            this.startDate = _data["startDate"];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new ApiMemberMedicationHistoryModel();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["dosage"] = this.dosage;
        data["endDate"] = this.endDate;
        data["frequency"] = this.frequency;
        data["memberRecordGuid"] = this.memberRecordGuid;
        data["name"] = this.name;
        data["providerName"] = this.providerName;
        data["startDate"] = this.startDate;
        return data;
    }
}
export class ApiMemberMedicationHistoryModelControllerActionResult {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            if (Array.isArray(_data["errors"])) {
                this.errors = [];
                for (let item of _data["errors"])
                    this.errors.push(ControllerActionResultError.fromJS(item));
            }
            this.payload = _data["payload"] ? ApiMemberMedicationHistoryModel.fromJS(_data["payload"]) : undefined;
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new ApiMemberMedicationHistoryModelControllerActionResult();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.errors)) {
            data["errors"] = [];
            for (let item of this.errors)
                data["errors"].push(item.toJSON());
        }
        data["payload"] = this.payload ? this.payload.toJSON() : undefined;
        return data;
    }
}
/** MemberAllergy record */
export class ApiMemberAllergyModel {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            this.id = _data["id"];
            this.memberRecordGuid = _data["memberRecordGuid"];
            this.name = _data["name"];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new ApiMemberAllergyModel();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["memberRecordGuid"] = this.memberRecordGuid;
        data["name"] = this.name;
        return data;
    }
}
export class ApiMemberAllergyModelListControllerActionResult {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            if (Array.isArray(_data["errors"])) {
                this.errors = [];
                for (let item of _data["errors"])
                    this.errors.push(ControllerActionResultError.fromJS(item));
            }
            if (Array.isArray(_data["payload"])) {
                this.payload = [];
                for (let item of _data["payload"])
                    this.payload.push(ApiMemberAllergyModel.fromJS(item));
            }
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new ApiMemberAllergyModelListControllerActionResult();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.errors)) {
            data["errors"] = [];
            for (let item of this.errors)
                data["errors"].push(item.toJSON());
        }
        if (Array.isArray(this.payload)) {
            data["payload"] = [];
            for (let item of this.payload)
                data["payload"].push(item.toJSON());
        }
        return data;
    }
}
export class ApiMemberAllergyModelControllerActionResult {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            if (Array.isArray(_data["errors"])) {
                this.errors = [];
                for (let item of _data["errors"])
                    this.errors.push(ControllerActionResultError.fromJS(item));
            }
            this.payload = _data["payload"] ? ApiMemberAllergyModel.fromJS(_data["payload"]) : undefined;
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new ApiMemberAllergyModelControllerActionResult();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.errors)) {
            data["errors"] = [];
            for (let item of this.errors)
                data["errors"].push(item.toJSON());
        }
        data["payload"] = this.payload ? this.payload.toJSON() : undefined;
        return data;
    }
}
/** MemberCard record */
export class ApiMemberCardModel {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            this.id = _data["id"];
            this.cardNumber = _data["cardNumber"];
            this.cardStatus = _data["cardStatus"];
            this.effectiveDate = _data["effectiveDate"] ? new Date(_data["effectiveDate"].toString()) : undefined;
            this.eligibilityRecordGuid = _data["eligibilityRecordGuid"];
            this.expirationDate = _data["expirationDate"];
            this.name = _data["name"];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new ApiMemberCardModel();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["cardNumber"] = this.cardNumber;
        data["cardStatus"] = this.cardStatus;
        data["effectiveDate"] = this.effectiveDate ? this.effectiveDate.toISOString() : undefined;
        data["eligibilityRecordGuid"] = this.eligibilityRecordGuid;
        data["expirationDate"] = this.expirationDate;
        data["name"] = this.name;
        return data;
    }
}
export class ApiMemberCardModelControllerActionResult {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            if (Array.isArray(_data["errors"])) {
                this.errors = [];
                for (let item of _data["errors"])
                    this.errors.push(ControllerActionResultError.fromJS(item));
            }
            this.payload = _data["payload"] ? ApiMemberCardModel.fromJS(_data["payload"]) : undefined;
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new ApiMemberCardModelControllerActionResult();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.errors)) {
            data["errors"] = [];
            for (let item of this.errors)
                data["errors"].push(item.toJSON());
        }
        data["payload"] = this.payload ? this.payload.toJSON() : undefined;
        return data;
    }
}
/** MemberEmergencyContact record */
export class ApiMemberEmergencyContactModel {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            this.id = _data["id"];
            this.addressLine1 = _data["addressLine1"];
            this.addressLine2 = _data["addressLine2"];
            this.city = _data["city"];
            this.emailAddress = _data["emailAddress"];
            this.faxNumber = _data["faxNumber"];
            this.firstName = _data["firstName"];
            this.gender = _data["gender"];
            this.homePhone = _data["homePhone"];
            this.lastName = _data["lastName"];
            this.homePhone2 = _data["homePhone2"];
            this.memberRecordGuid = _data["memberRecordGuid"];
            this.mobileNumber = _data["mobileNumber"];
            this.postalCode = _data["postalCode"];
            this.relationship = _data["relationship"];
            this.state = _data["state"];
            this.workNumber = _data["workNumber"];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new ApiMemberEmergencyContactModel();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["addressLine1"] = this.addressLine1;
        data["addressLine2"] = this.addressLine2;
        data["city"] = this.city;
        data["emailAddress"] = this.emailAddress;
        data["faxNumber"] = this.faxNumber;
        data["firstName"] = this.firstName;
        data["gender"] = this.gender;
        data["homePhone"] = this.homePhone;
        data["lastName"] = this.lastName;
        data["homePhone2"] = this.homePhone2;
        data["memberRecordGuid"] = this.memberRecordGuid;
        data["mobileNumber"] = this.mobileNumber;
        data["postalCode"] = this.postalCode;
        data["relationship"] = this.relationship;
        data["state"] = this.state;
        data["workNumber"] = this.workNumber;
        return data;
    }
}
export class ApiMemberEmergencyContactModelListControllerActionResult {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            if (Array.isArray(_data["errors"])) {
                this.errors = [];
                for (let item of _data["errors"])
                    this.errors.push(ControllerActionResultError.fromJS(item));
            }
            if (Array.isArray(_data["payload"])) {
                this.payload = [];
                for (let item of _data["payload"])
                    this.payload.push(ApiMemberEmergencyContactModel.fromJS(item));
            }
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new ApiMemberEmergencyContactModelListControllerActionResult();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.errors)) {
            data["errors"] = [];
            for (let item of this.errors)
                data["errors"].push(item.toJSON());
        }
        if (Array.isArray(this.payload)) {
            data["payload"] = [];
            for (let item of this.payload)
                data["payload"].push(item.toJSON());
        }
        return data;
    }
}
export class ApiMemberEmergencyContactModelControllerActionResult {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            if (Array.isArray(_data["errors"])) {
                this.errors = [];
                for (let item of _data["errors"])
                    this.errors.push(ControllerActionResultError.fromJS(item));
            }
            this.payload = _data["payload"] ? ApiMemberEmergencyContactModel.fromJS(_data["payload"]) : undefined;
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new ApiMemberEmergencyContactModelControllerActionResult();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.errors)) {
            data["errors"] = [];
            for (let item of this.errors)
                data["errors"].push(item.toJSON());
        }
        data["payload"] = this.payload ? this.payload.toJSON() : undefined;
        return data;
    }
}
/** Member record */
export class ApiMemberModel {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            this.dateOfBirth = _data["dateOfBirth"];
            this.isActive = _data["isActive"];
            this.isRegisteredOnPortal = _data["isRegisteredOnPortal"];
            this.jobTitle = _data["jobTitle"];
            this.memberID = _data["memberID"];
            this.profileImage = _data["profileImage"];
            this.relationshipToMember = _data["relationshipToMember"];
            this.ssn = _data["ssn"];
            this.groupRecordGuid = _data["groupRecordGuid"];
            this.id = _data["id"];
            this.addressLine1 = _data["addressLine1"];
            this.addressLine2 = _data["addressLine2"];
            this.city = _data["city"];
            this.country = _data["country"];
            this.emailAddress = _data["emailAddress"];
            this.faxNumber = _data["faxNumber"];
            this.firstName = _data["firstName"];
            this.gender = _data["gender"];
            this.homePhone = _data["homePhone"];
            this.homePhone2 = _data["homePhone2"];
            this.homePhone3 = _data["homePhone3"];
            this.lastName = _data["lastName"];
            this.middleName = _data["middleName"];
            this.mobileNumber = _data["mobileNumber"];
            this.mobileNumber2 = _data["mobileNumber2"];
            this.mobileNumber3 = _data["mobileNumber3"];
            this.name = _data["name"];
            this.otherEmailAddress = _data["otherEmailAddress"];
            this.postalCode = _data["postalCode"];
            this.state = _data["state"];
            this.workNumber = _data["workNumber"];
            this.workNumber2 = _data["workNumber2"];
            this.workPhone2Extention = _data["workPhone2Extention"];
            this.workPhoneExtension = _data["workPhoneExtension"];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new ApiMemberModel();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["dateOfBirth"] = this.dateOfBirth;
        data["isActive"] = this.isActive;
        data["isRegisteredOnPortal"] = this.isRegisteredOnPortal;
        data["jobTitle"] = this.jobTitle;
        data["memberID"] = this.memberID;
        data["profileImage"] = this.profileImage;
        data["relationshipToMember"] = this.relationshipToMember;
        data["ssn"] = this.ssn;
        data["groupRecordGuid"] = this.groupRecordGuid;
        data["id"] = this.id;
        data["addressLine1"] = this.addressLine1;
        data["addressLine2"] = this.addressLine2;
        data["city"] = this.city;
        data["country"] = this.country;
        data["emailAddress"] = this.emailAddress;
        data["faxNumber"] = this.faxNumber;
        data["firstName"] = this.firstName;
        data["gender"] = this.gender;
        data["homePhone"] = this.homePhone;
        data["homePhone2"] = this.homePhone2;
        data["homePhone3"] = this.homePhone3;
        data["lastName"] = this.lastName;
        data["middleName"] = this.middleName;
        data["mobileNumber"] = this.mobileNumber;
        data["mobileNumber2"] = this.mobileNumber2;
        data["mobileNumber3"] = this.mobileNumber3;
        data["name"] = this.name;
        data["otherEmailAddress"] = this.otherEmailAddress;
        data["postalCode"] = this.postalCode;
        data["state"] = this.state;
        data["workNumber"] = this.workNumber;
        data["workNumber2"] = this.workNumber2;
        data["workPhone2Extention"] = this.workPhone2Extention;
        data["workPhoneExtension"] = this.workPhoneExtension;
        return data;
    }
}
export class ApiMemberModelControllerActionResult {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            if (Array.isArray(_data["errors"])) {
                this.errors = [];
                for (let item of _data["errors"])
                    this.errors.push(ControllerActionResultError.fromJS(item));
            }
            this.payload = _data["payload"] ? ApiMemberModel.fromJS(_data["payload"]) : undefined;
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new ApiMemberModelControllerActionResult();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.errors)) {
            data["errors"] = [];
            for (let item of this.errors)
                data["errors"].push(item.toJSON());
        }
        data["payload"] = this.payload ? this.payload.toJSON() : undefined;
        return data;
    }
}
/** Member contact information */
export class ApiMemberContactModel {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            this.id = _data["id"];
            this.addressLine1 = _data["addressLine1"];
            this.addressLine2 = _data["addressLine2"];
            this.city = _data["city"];
            this.country = _data["country"];
            this.emailAddress = _data["emailAddress"];
            this.faxNumber = _data["faxNumber"];
            this.firstName = _data["firstName"];
            this.gender = _data["gender"];
            this.homePhone = _data["homePhone"];
            this.homePhone2 = _data["homePhone2"];
            this.homePhone3 = _data["homePhone3"];
            this.lastName = _data["lastName"];
            this.middleName = _data["middleName"];
            this.mobileNumber = _data["mobileNumber"];
            this.mobileNumber2 = _data["mobileNumber2"];
            this.mobileNumber3 = _data["mobileNumber3"];
            this.name = _data["name"];
            this.otherEmailAddress = _data["otherEmailAddress"];
            this.postalCode = _data["postalCode"];
            this.state = _data["state"];
            this.workNumber = _data["workNumber"];
            this.workNumber2 = _data["workNumber2"];
            this.workPhone2Extention = _data["workPhone2Extention"];
            this.workPhoneExtension = _data["workPhoneExtension"];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new ApiMemberContactModel();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["addressLine1"] = this.addressLine1;
        data["addressLine2"] = this.addressLine2;
        data["city"] = this.city;
        data["country"] = this.country;
        data["emailAddress"] = this.emailAddress;
        data["faxNumber"] = this.faxNumber;
        data["firstName"] = this.firstName;
        data["gender"] = this.gender;
        data["homePhone"] = this.homePhone;
        data["homePhone2"] = this.homePhone2;
        data["homePhone3"] = this.homePhone3;
        data["lastName"] = this.lastName;
        data["middleName"] = this.middleName;
        data["mobileNumber"] = this.mobileNumber;
        data["mobileNumber2"] = this.mobileNumber2;
        data["mobileNumber3"] = this.mobileNumber3;
        data["name"] = this.name;
        data["otherEmailAddress"] = this.otherEmailAddress;
        data["postalCode"] = this.postalCode;
        data["state"] = this.state;
        data["workNumber"] = this.workNumber;
        data["workNumber2"] = this.workNumber2;
        data["workPhone2Extention"] = this.workPhone2Extention;
        data["workPhoneExtension"] = this.workPhoneExtension;
        return data;
    }
}
export class ApiMemberContactModelControllerActionResult {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            if (Array.isArray(_data["errors"])) {
                this.errors = [];
                for (let item of _data["errors"])
                    this.errors.push(ControllerActionResultError.fromJS(item));
            }
            this.payload = _data["payload"] ? ApiMemberContactModel.fromJS(_data["payload"]) : undefined;
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new ApiMemberContactModelControllerActionResult();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.errors)) {
            data["errors"] = [];
            for (let item of this.errors)
                data["errors"].push(item.toJSON());
        }
        data["payload"] = this.payload ? this.payload.toJSON() : undefined;
        return data;
    }
}
export class InNetwork {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            this.inNetworkAmount = _data["inNetworkAmount"];
            this.inNetworkMaxAmount = _data["inNetworkMaxAmount"];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new InNetwork();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["inNetworkAmount"] = this.inNetworkAmount;
        data["inNetworkMaxAmount"] = this.inNetworkMaxAmount;
        return data;
    }
}
export class OutNetwork {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            this.outOfNetworkAmount = _data["outOfNetworkAmount"];
            this.outOfNetworkMaxAmount = _data["outOfNetworkMaxAmount"];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new OutNetwork();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["outOfNetworkAmount"] = this.outOfNetworkAmount;
        data["outOfNetworkMaxAmount"] = this.outOfNetworkMaxAmount;
        return data;
    }
}
export class Fact {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            this.inNetwork = _data["inNetwork"] ? InNetwork.fromJS(_data["inNetwork"]) : undefined;
            this.outNetwork = _data["outNetwork"] ? OutNetwork.fromJS(_data["outNetwork"]) : undefined;
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new Fact();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["inNetwork"] = this.inNetwork ? this.inNetwork.toJSON() : undefined;
        data["outNetwork"] = this.outNetwork ? this.outNetwork.toJSON() : undefined;
        return data;
    }
}
export class FactCategory {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            this.name = _data["name"];
            this.title = _data["title"];
            this.amounts = _data["amounts"] ? Fact.fromJS(_data["amounts"]) : undefined;
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new FactCategory();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["title"] = this.title;
        data["amounts"] = this.amounts ? this.amounts.toJSON() : undefined;
        return data;
    }
}
export class FactSet {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            this.name = _data["name"];
            this.title = _data["title"];
            if (Array.isArray(_data["categories"])) {
                this.categories = [];
                for (let item of _data["categories"])
                    this.categories.push(FactCategory.fromJS(item));
            }
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new FactSet();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["title"] = this.title;
        if (Array.isArray(this.categories)) {
            data["categories"] = [];
            for (let item of this.categories)
                data["categories"].push(item.toJSON());
        }
        return data;
    }
}
export class MemberEligibilityFact {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            this.planId = _data["planId"];
            this.planName = _data["planName"];
            this.effectiveDate = _data["effectiveDate"];
            this.endDate = _data["endDate"];
            this.deductible = _data["deductible"] ? FactSet.fromJS(_data["deductible"]) : undefined;
            this.outOfPocket = _data["outOfPocket"] ? FactSet.fromJS(_data["outOfPocket"]) : undefined;
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new MemberEligibilityFact();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["planId"] = this.planId;
        data["planName"] = this.planName;
        data["effectiveDate"] = this.effectiveDate;
        data["endDate"] = this.endDate;
        data["deductible"] = this.deductible ? this.deductible.toJSON() : undefined;
        data["outOfPocket"] = this.outOfPocket ? this.outOfPocket.toJSON() : undefined;
        return data;
    }
}
export class MemberEligibilityFactControllerActionResult {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            if (Array.isArray(_data["errors"])) {
                this.errors = [];
                for (let item of _data["errors"])
                    this.errors.push(ControllerActionResultError.fromJS(item));
            }
            this.payload = _data["payload"] ? MemberEligibilityFact.fromJS(_data["payload"]) : undefined;
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new MemberEligibilityFactControllerActionResult();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.errors)) {
            data["errors"] = [];
            for (let item of this.errors)
                data["errors"].push(item.toJSON());
        }
        data["payload"] = this.payload ? this.payload.toJSON() : undefined;
        return data;
    }
}
/** RxClaim record */
export class ApiRxClaimModel {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            this.id = _data["id"];
            this.beneficiaryFirstName = _data["beneficiaryFirstName"];
            this.beneficiaryLastName = _data["beneficiaryLastName"];
            this.brandGenericIndicator = _data["brandGenericIndicator"];
            this.copayAmount = _data["copayAmount"];
            this.deductibleAmount = _data["deductibleAmount"];
            this.filledDate = _data["filledDate"];
            this.memberFirstName = _data["memberFirstName"];
            this.memberLastName = _data["memberLastName"];
            this.nabp = _data["nabp"];
            this.ndc = _data["ndc"];
            this.organization = _data["organization"];
            this.pharmacyName = _data["pharmacyName"];
            this.productAbbreviation = _data["productAbbreviation"];
            this.qty = _data["qty"];
            this.refill = _data["refill"];
            this.relationship = _data["relationship"];
            this.rxNumber = _data["rxNumber"];
            this.totalAmount = _data["totalAmount"];
            this.writtenDate = _data["writtenDate"];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new ApiRxClaimModel();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["beneficiaryFirstName"] = this.beneficiaryFirstName;
        data["beneficiaryLastName"] = this.beneficiaryLastName;
        data["brandGenericIndicator"] = this.brandGenericIndicator;
        data["copayAmount"] = this.copayAmount;
        data["deductibleAmount"] = this.deductibleAmount;
        data["filledDate"] = this.filledDate;
        data["memberFirstName"] = this.memberFirstName;
        data["memberLastName"] = this.memberLastName;
        data["nabp"] = this.nabp;
        data["ndc"] = this.ndc;
        data["organization"] = this.organization;
        data["pharmacyName"] = this.pharmacyName;
        data["productAbbreviation"] = this.productAbbreviation;
        data["qty"] = this.qty;
        data["refill"] = this.refill;
        data["relationship"] = this.relationship;
        data["rxNumber"] = this.rxNumber;
        data["totalAmount"] = this.totalAmount;
        data["writtenDate"] = this.writtenDate;
        return data;
    }
}
export class ApiRxClaimModelControllerActionResult {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            if (Array.isArray(_data["errors"])) {
                this.errors = [];
                for (let item of _data["errors"])
                    this.errors.push(ControllerActionResultError.fromJS(item));
            }
            this.payload = _data["payload"] ? ApiRxClaimModel.fromJS(_data["payload"]) : undefined;
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new ApiRxClaimModelControllerActionResult();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.errors)) {
            data["errors"] = [];
            for (let item of this.errors)
                data["errors"].push(item.toJSON());
        }
        data["payload"] = this.payload ? this.payload.toJSON() : undefined;
        return data;
    }
}
/** MedicalClaimLineItem record */
export class ApiMedicalClaimLineItemModel {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            this.id = _data["id"];
            this.amountAllowed = _data["amountAllowed"];
            this.amountBilled = _data["amountBilled"];
            this.amountCOB = _data["amountCOB"];
            this.amountCoInsurance = _data["amountCoInsurance"];
            this.amountCopay = _data["amountCopay"];
            this.amountDeductible = _data["amountDeductible"];
            this.amountExcluded = _data["amountExcluded"];
            this.claimNumber = _data["claimNumber"];
            this.dependentCode = _data["dependentCode"];
            this.diagnosticCodePrimary = _data["diagnosticCodePrimary"];
            this.diagnosticCodeQuaternary = _data["diagnosticCodeQuaternary"];
            this.diagnosticCodeSecondary = _data["diagnosticCodeSecondary"];
            this.diagnosticCodeTertiary = _data["diagnosticCodeTertiary"];
            this.diagnosticDescPrimary = _data["diagnosticDescPrimary"];
            this.diagnosticDescQuaternary = _data["diagnosticDescQuaternary"];
            this.diagnosticDescSecondary = _data["diagnosticDescSecondary"];
            this.diagnosticDescTertiary = _data["diagnosticDescTertiary"];
            this.lineNumber = _data["lineNumber"];
            this.paidDate = _data["paidDate"] ? new Date(_data["paidDate"].toString()) : undefined;
            this.patientAge = _data["patientAge"];
            this.patientGender = _data["patientGender"];
            this.primaryCPTCode = _data["primaryCPTCode"];
            this.primaryCPTCodeDesc = _data["primaryCPTCodeDesc"];
            this.quantityUnits = _data["quantityUnits"];
            this.serviceLocationCode = _data["serviceLocationCode"];
            this.serviceStartDate = _data["serviceStartDate"] ? new Date(_data["serviceStartDate"].toString()) : undefined;
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new ApiMedicalClaimLineItemModel();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["amountAllowed"] = this.amountAllowed;
        data["amountBilled"] = this.amountBilled;
        data["amountCOB"] = this.amountCOB;
        data["amountCoInsurance"] = this.amountCoInsurance;
        data["amountCopay"] = this.amountCopay;
        data["amountDeductible"] = this.amountDeductible;
        data["amountExcluded"] = this.amountExcluded;
        data["claimNumber"] = this.claimNumber;
        data["dependentCode"] = this.dependentCode;
        data["diagnosticCodePrimary"] = this.diagnosticCodePrimary;
        data["diagnosticCodeQuaternary"] = this.diagnosticCodeQuaternary;
        data["diagnosticCodeSecondary"] = this.diagnosticCodeSecondary;
        data["diagnosticCodeTertiary"] = this.diagnosticCodeTertiary;
        data["diagnosticDescPrimary"] = this.diagnosticDescPrimary;
        data["diagnosticDescQuaternary"] = this.diagnosticDescQuaternary;
        data["diagnosticDescSecondary"] = this.diagnosticDescSecondary;
        data["diagnosticDescTertiary"] = this.diagnosticDescTertiary;
        data["lineNumber"] = this.lineNumber;
        data["paidDate"] = this.paidDate ? this.paidDate.toISOString() : undefined;
        data["patientAge"] = this.patientAge;
        data["patientGender"] = this.patientGender;
        data["primaryCPTCode"] = this.primaryCPTCode;
        data["primaryCPTCodeDesc"] = this.primaryCPTCodeDesc;
        data["quantityUnits"] = this.quantityUnits;
        data["serviceLocationCode"] = this.serviceLocationCode;
        data["serviceStartDate"] = this.serviceStartDate ? this.serviceStartDate.toISOString() : undefined;
        return data;
    }
}
export class ApiMedicalClaimLineItemModelListControllerActionResult {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            if (Array.isArray(_data["errors"])) {
                this.errors = [];
                for (let item of _data["errors"])
                    this.errors.push(ControllerActionResultError.fromJS(item));
            }
            if (Array.isArray(_data["payload"])) {
                this.payload = [];
                for (let item of _data["payload"])
                    this.payload.push(ApiMedicalClaimLineItemModel.fromJS(item));
            }
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new ApiMedicalClaimLineItemModelListControllerActionResult();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.errors)) {
            data["errors"] = [];
            for (let item of this.errors)
                data["errors"].push(item.toJSON());
        }
        if (Array.isArray(this.payload)) {
            data["payload"] = [];
            for (let item of this.payload)
                data["payload"].push(item.toJSON());
        }
        return data;
    }
}
export class MFAModel {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            this.mfaSetting = _data["mfaSetting"];
            this.id = _data["id"];
            this.name = _data["name"];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new MFAModel();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["mfaSetting"] = this.mfaSetting;
        data["id"] = this.id;
        data["name"] = this.name;
        return data;
    }
}
export class MFAModelControllerActionResult {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            if (Array.isArray(_data["errors"])) {
                this.errors = [];
                for (let item of _data["errors"])
                    this.errors.push(ControllerActionResultError.fromJS(item));
            }
            this.payload = _data["payload"] ? MFAModel.fromJS(_data["payload"]) : undefined;
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new MFAModelControllerActionResult();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.errors)) {
            data["errors"] = [];
            for (let item of this.errors)
                data["errors"].push(item.toJSON());
        }
        data["payload"] = this.payload ? this.payload.toJSON() : undefined;
        return data;
    }
}
export class TPAModel {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.addressLine1 = _data["addressLine1"];
            this.city = _data["city"];
            this.state = _data["state"];
            this.zipCode = _data["zipCode"];
            this.mainPhoneNumber = _data["mainPhoneNumber"];
            this.webSiteUrl = _data["webSiteUrl"];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new TPAModel();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["addressLine1"] = this.addressLine1;
        data["city"] = this.city;
        data["state"] = this.state;
        data["zipCode"] = this.zipCode;
        data["mainPhoneNumber"] = this.mainPhoneNumber;
        data["webSiteUrl"] = this.webSiteUrl;
        return data;
    }
}
export class TPAModelControllerActionResult {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            if (Array.isArray(_data["errors"])) {
                this.errors = [];
                for (let item of _data["errors"])
                    this.errors.push(ControllerActionResultError.fromJS(item));
            }
            this.payload = _data["payload"] ? TPAModel.fromJS(_data["payload"]) : undefined;
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new TPAModelControllerActionResult();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.errors)) {
            data["errors"] = [];
            for (let item of this.errors)
                data["errors"].push(item.toJSON());
        }
        data["payload"] = this.payload ? this.payload.toJSON() : undefined;
        return data;
    }
}
export class FindMemberModel {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.ssn = _data["ssn"];
            this.firstName = _data["firstName"];
            this.lastName = _data["lastName"];
            this.gender = _data["gender"];
            this.mobileNumber = _data["mobileNumber"];
            this.emailAddress = _data["emailAddress"];
            this.groupName = _data["groupName"];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new FindMemberModel();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["ssn"] = this.ssn;
        data["firstName"] = this.firstName;
        data["lastName"] = this.lastName;
        data["gender"] = this.gender;
        data["mobileNumber"] = this.mobileNumber;
        data["emailAddress"] = this.emailAddress;
        data["groupName"] = this.groupName;
        return data;
    }
}
export class FindMemberModelControllerActionResult {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            if (Array.isArray(_data["errors"])) {
                this.errors = [];
                for (let item of _data["errors"])
                    this.errors.push(ControllerActionResultError.fromJS(item));
            }
            this.payload = _data["payload"] ? FindMemberModel.fromJS(_data["payload"]) : undefined;
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new FindMemberModelControllerActionResult();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.errors)) {
            data["errors"] = [];
            for (let item of this.errors)
                data["errors"].push(item.toJSON());
        }
        data["payload"] = this.payload ? this.payload.toJSON() : undefined;
        return data;
    }
}
/** Represents a disagnostic obtained from a claim record */
export class ApiMedicalClaimDiagnosticModel {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            this.id = _data["id"];
            this.serviceDate = _data["serviceDate"];
            this.primaryDiagnostic = _data["primaryDiagnostic"];
            this.secondaryDiagnostic = _data["secondaryDiagnostic"];
            this.tertiaryDiagnostic = _data["tertiaryDiagnostic"];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new ApiMedicalClaimDiagnosticModel();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["serviceDate"] = this.serviceDate;
        data["primaryDiagnostic"] = this.primaryDiagnostic;
        data["secondaryDiagnostic"] = this.secondaryDiagnostic;
        data["tertiaryDiagnostic"] = this.tertiaryDiagnostic;
        return data;
    }
}
export class ApiMedicalClaimDiagnosticModelControllerActionResult {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            if (Array.isArray(_data["errors"])) {
                this.errors = [];
                for (let item of _data["errors"])
                    this.errors.push(ControllerActionResultError.fromJS(item));
            }
            this.payload = _data["payload"] ? ApiMedicalClaimDiagnosticModel.fromJS(_data["payload"]) : undefined;
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new ApiMedicalClaimDiagnosticModelControllerActionResult();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.errors)) {
            data["errors"] = [];
            for (let item of this.errors)
                data["errors"].push(item.toJSON());
        }
        data["payload"] = this.payload ? this.payload.toJSON() : undefined;
        return data;
    }
}
export class FileModel {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            this.fileGuid = _data["fileGuid"];
            this.fileName = _data["fileName"];
            this.fileExtension = _data["fileExtension"];
            this.base64FileContent = _data["base64FileContent"];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new FileModel();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["fileGuid"] = this.fileGuid;
        data["fileName"] = this.fileName;
        data["fileExtension"] = this.fileExtension;
        data["base64FileContent"] = this.base64FileContent;
        return data;
    }
}
export class FileModelControllerActionResult {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            if (Array.isArray(_data["errors"])) {
                this.errors = [];
                for (let item of _data["errors"])
                    this.errors.push(ControllerActionResultError.fromJS(item));
            }
            this.payload = _data["payload"] ? FileModel.fromJS(_data["payload"]) : undefined;
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new FileModelControllerActionResult();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.errors)) {
            data["errors"] = [];
            for (let item of this.errors)
                data["errors"].push(item.toJSON());
        }
        data["payload"] = this.payload ? this.payload.toJSON() : undefined;
        return data;
    }
}
export class VerifyMemberModel {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            this.firstName = _data["firstName"];
            this.lastName = _data["lastName"];
            this.dateOfBirth = _data["dateOfBirth"];
            this.gender = _data["gender"];
            this.ssn = _data["ssn"];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new VerifyMemberModel();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["firstName"] = this.firstName;
        data["lastName"] = this.lastName;
        data["dateOfBirth"] = this.dateOfBirth;
        data["gender"] = this.gender;
        data["ssn"] = this.ssn;
        return data;
    }
}
export class MemberModel {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            this.addressLine1 = _data["addressLine1"];
            this.addressLine2 = _data["addressLine2"];
            this.city = _data["city"];
            this.country = _data["country"];
            this.dateOfBirth = _data["dateOfBirth"];
            this.emailAddress = _data["emailAddress"];
            this.faxNumber = _data["faxNumber"];
            this.firstName = _data["firstName"];
            this.gender = _data["gender"];
            this.homePhone = _data["homePhone"];
            this.homePhone2 = _data["homePhone2"];
            this.homePhone3 = _data["homePhone3"];
            this.isActive = _data["isActive"];
            this.isRegisteredOnPortal = _data["isRegisteredOnPortal"];
            this.jobTitle = _data["jobTitle"];
            this.lastName = _data["lastName"];
            this.memberID = _data["memberID"];
            this.mfaSetting = _data["mfaSetting"];
            this.middleName = _data["middleName"];
            this.mobileNumber = _data["mobileNumber"];
            this.mobileNumber2 = _data["mobileNumber2"];
            this.mobileNumber3 = _data["mobileNumber3"];
            this.otherEmailAddress = _data["otherEmailAddress"];
            this.postalCode = _data["postalCode"];
            this.profileImage = _data["profileImage"];
            this.relationshipToMember = _data["relationshipToMember"];
            this.ssn = _data["ssn"];
            this.state = _data["state"];
            this.workNumber = _data["workNumber"];
            this.workNumber2 = _data["workNumber2"];
            this.workPhone2Extention = _data["workPhone2Extention"];
            this.workPhoneExtension = _data["workPhoneExtension"];
            this.groupRecordGuid = _data["groupRecordGuid"];
            this.id = _data["id"];
            this.name = _data["name"];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new MemberModel();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["addressLine1"] = this.addressLine1;
        data["addressLine2"] = this.addressLine2;
        data["city"] = this.city;
        data["country"] = this.country;
        data["dateOfBirth"] = this.dateOfBirth;
        data["emailAddress"] = this.emailAddress;
        data["faxNumber"] = this.faxNumber;
        data["firstName"] = this.firstName;
        data["gender"] = this.gender;
        data["homePhone"] = this.homePhone;
        data["homePhone2"] = this.homePhone2;
        data["homePhone3"] = this.homePhone3;
        data["isActive"] = this.isActive;
        data["isRegisteredOnPortal"] = this.isRegisteredOnPortal;
        data["jobTitle"] = this.jobTitle;
        data["lastName"] = this.lastName;
        data["memberID"] = this.memberID;
        data["mfaSetting"] = this.mfaSetting;
        data["middleName"] = this.middleName;
        data["mobileNumber"] = this.mobileNumber;
        data["mobileNumber2"] = this.mobileNumber2;
        data["mobileNumber3"] = this.mobileNumber3;
        data["otherEmailAddress"] = this.otherEmailAddress;
        data["postalCode"] = this.postalCode;
        data["profileImage"] = this.profileImage;
        data["relationshipToMember"] = this.relationshipToMember;
        data["ssn"] = this.ssn;
        data["state"] = this.state;
        data["workNumber"] = this.workNumber;
        data["workNumber2"] = this.workNumber2;
        data["workPhone2Extention"] = this.workPhone2Extention;
        data["workPhoneExtension"] = this.workPhoneExtension;
        data["groupRecordGuid"] = this.groupRecordGuid;
        data["id"] = this.id;
        data["name"] = this.name;
        return data;
    }
}
export class MemberModelControllerActionResult {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            if (Array.isArray(_data["errors"])) {
                this.errors = [];
                for (let item of _data["errors"])
                    this.errors.push(ControllerActionResultError.fromJS(item));
            }
            this.payload = _data["payload"] ? MemberModel.fromJS(_data["payload"]) : undefined;
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new MemberModelControllerActionResult();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.errors)) {
            data["errors"] = [];
            for (let item of this.errors)
                data["errors"].push(item.toJSON());
        }
        data["payload"] = this.payload ? this.payload.toJSON() : undefined;
        return data;
    }
}
export class IsRegistered {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            this.isRegisteredOnPortal = _data["isRegisteredOnPortal"];
            this.id = _data["id"];
            this.name = _data["name"];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new IsRegistered();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["isRegisteredOnPortal"] = this.isRegisteredOnPortal;
        data["id"] = this.id;
        data["name"] = this.name;
        return data;
    }
}
/** The pre-auth model */
export class PreAuthorizationRequestAPIModel {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            this.description = _data["description"];
            this.expectedServiceDate = _data["expectedServiceDate"];
            this.expectedServiceEnd = _data["expectedServiceEnd"];
            this.memberRecordGuid = _data["memberRecordGuid"];
            this.requestingProvidergGuid = _data["requestingProvidergGuid"];
            this.servicingProviderGuid = _data["servicingProviderGuid"];
            this.requestingFacilityGuid = _data["requestingFacilityGuid"];
            this.servicingFacilityGuid = _data["servicingFacilityGuid"];
            this.approvalPeridodStartDate = _data["approvalPeridodStartDate"];
            this.approvalPeridodEndDate = _data["approvalPeridodEndDate"];
            this.requestingProviderName = _data["requestingProviderName"];
            this.requestingFacilityName = _data["requestingFacilityName"];
            this.servicingProviderName = _data["servicingProviderName"];
            this.servicingFacilityName = _data["servicingFacilityName"];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new PreAuthorizationRequestAPIModel();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["description"] = this.description;
        data["expectedServiceDate"] = this.expectedServiceDate;
        data["expectedServiceEnd"] = this.expectedServiceEnd;
        data["memberRecordGuid"] = this.memberRecordGuid;
        data["requestingProvidergGuid"] = this.requestingProvidergGuid;
        data["servicingProviderGuid"] = this.servicingProviderGuid;
        data["requestingFacilityGuid"] = this.requestingFacilityGuid;
        data["servicingFacilityGuid"] = this.servicingFacilityGuid;
        data["approvalPeridodStartDate"] = this.approvalPeridodStartDate;
        data["approvalPeridodEndDate"] = this.approvalPeridodEndDate;
        data["requestingProviderName"] = this.requestingProviderName;
        data["requestingFacilityName"] = this.requestingFacilityName;
        data["servicingProviderName"] = this.servicingProviderName;
        data["servicingFacilityName"] = this.servicingFacilityName;
        return data;
    }
}
export class PreAuthorizationRequestAPIModelControllerActionResult {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            if (Array.isArray(_data["errors"])) {
                this.errors = [];
                for (let item of _data["errors"])
                    this.errors.push(ControllerActionResultError.fromJS(item));
            }
            this.payload = _data["payload"] ? PreAuthorizationRequestAPIModel.fromJS(_data["payload"]) : undefined;
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new PreAuthorizationRequestAPIModelControllerActionResult();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.errors)) {
            data["errors"] = [];
            for (let item of this.errors)
                data["errors"].push(item.toJSON());
        }
        data["payload"] = this.payload ? this.payload.toJSON() : undefined;
        return data;
    }
}
/** Defines a new medical procedure */
export class ApiNewPreAuthProcedureModel {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            this.id = _data["id"];
            this.number = _data["number"];
            this.units = _data["units"];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new ApiNewPreAuthProcedureModel();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["number"] = this.number;
        data["units"] = this.units;
        return data;
    }
}
/** New pre-auth model */
export class ApiNewPreAuthModel {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            this.userName = _data["userName"];
            if (Array.isArray(_data["services"])) {
                this.services = [];
                for (let item of _data["services"])
                    this.services.push(item);
            }
            if (Array.isArray(_data["procedures"])) {
                this.procedures = [];
                for (let item of _data["procedures"])
                    this.procedures.push(ApiNewPreAuthProcedureModel.fromJS(item));
            }
            if (Array.isArray(_data["diagnosis"])) {
                this.diagnosis = [];
                for (let item of _data["diagnosis"])
                    this.diagnosis.push(item);
            }
            if (Array.isArray(_data["documents"])) {
                this.documents = [];
                for (let item of _data["documents"])
                    this.documents.push(ApiNewPreAuthDocumentModel.fromJS(item));
            }
            this.description = _data["description"];
            this.expectedServiceDate = _data["expectedServiceDate"];
            this.expectedServiceEnd = _data["expectedServiceEnd"];
            this.memberRecordGuid = _data["memberRecordGuid"];
            this.requestingProvidergGuid = _data["requestingProvidergGuid"];
            this.servicingProviderGuid = _data["servicingProviderGuid"];
            this.requestingFacilityGuid = _data["requestingFacilityGuid"];
            this.servicingFacilityGuid = _data["servicingFacilityGuid"];
            this.approvalPeridodStartDate = _data["approvalPeridodStartDate"];
            this.approvalPeridodEndDate = _data["approvalPeridodEndDate"];
            this.requestingProviderName = _data["requestingProviderName"];
            this.requestingFacilityName = _data["requestingFacilityName"];
            this.servicingProviderName = _data["servicingProviderName"];
            this.servicingFacilityName = _data["servicingFacilityName"];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new ApiNewPreAuthModel();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["userName"] = this.userName;
        if (Array.isArray(this.services)) {
            data["services"] = [];
            for (let item of this.services)
                data["services"].push(item);
        }
        if (Array.isArray(this.procedures)) {
            data["procedures"] = [];
            for (let item of this.procedures)
                data["procedures"].push(item.toJSON());
        }
        if (Array.isArray(this.diagnosis)) {
            data["diagnosis"] = [];
            for (let item of this.diagnosis)
                data["diagnosis"].push(item);
        }
        if (Array.isArray(this.documents)) {
            data["documents"] = [];
            for (let item of this.documents)
                data["documents"].push(item.toJSON());
        }
        data["description"] = this.description;
        data["expectedServiceDate"] = this.expectedServiceDate;
        data["expectedServiceEnd"] = this.expectedServiceEnd;
        data["memberRecordGuid"] = this.memberRecordGuid;
        data["requestingProvidergGuid"] = this.requestingProvidergGuid;
        data["servicingProviderGuid"] = this.servicingProviderGuid;
        data["requestingFacilityGuid"] = this.requestingFacilityGuid;
        data["servicingFacilityGuid"] = this.servicingFacilityGuid;
        data["approvalPeridodStartDate"] = this.approvalPeridodStartDate;
        data["approvalPeridodEndDate"] = this.approvalPeridodEndDate;
        data["requestingProviderName"] = this.requestingProviderName;
        data["requestingFacilityName"] = this.requestingFacilityName;
        data["servicingProviderName"] = this.servicingProviderName;
        data["servicingFacilityName"] = this.servicingFacilityName;
        return data;
    }
}
/** Pre-Authorization letter model */
export class PreAuthorizationLetterModel {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            this.letter = _data["letter"];
            this.userName = _data["userName"];
            this.allowMemberAccess = _data["allowMemberAccess"];
            this.allowFacilityAccess = _data["allowFacilityAccess"];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new PreAuthorizationLetterModel();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["letter"] = this.letter;
        data["userName"] = this.userName;
        data["allowMemberAccess"] = this.allowMemberAccess;
        data["allowFacilityAccess"] = this.allowFacilityAccess;
        return data;
    }
}
export class ApiException extends Error {
    constructor(message, status, response, headers, result) {
        super();
        this.isApiException = true;
        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }
    static isApiException(obj) {
        return obj.isApiException === true;
    }
}
function throwException(message, status, response, headers, result) {
    if (result !== null && result !== undefined)
        throw result;
    else
        throw new ApiException(message, status, response, headers, null);
}
